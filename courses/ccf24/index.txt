# Python Course Learning Objectives

In a world where data is considered a commodity, data science practitioners need to have a greater understanding of the components of designing and writing Python code. Our course will provide you with a comprehensive introduction to the most popular programming language and teach you how to leverage it to solve real-world problems. After completing the course, you will be able to:

- Create persisting models to be deployed as an API or used for batch scoring.
- Design code that runs in parallel using multiprocessing and multithreading functionality.
- Discuss advanced Python functionalities like classes and functions.

[Learn more](https://professional.uchicago.edu/find-your-fit/professional-education/python-data-science)

## Python Curriculum

### Python Course Format

- Eight weeks in length.
- Weekly, self-paced interactive learning modules and assignments are time-sensitive and should be completed by the set deadlines.
- Synchronous sessions and live question and answer sessions.
- Mentors to provide continuous support and encourage a dynamic and positive learning environment.

### You will learn to:

- Understand the Python language.
- Perform advanced data analysis and manipulation.
- Write production-level Python code.
- Train and evaluate machine-learning models.
- Design and optimize Python code for performance and speed.
- Write Python code to efficiently process large data sets.
- Prepare machine-learning models for production use.

### Methodologies and Techniques:

- Python
- Jupyter
- Anaconda

### Weekly Course Schedule

**Week 1:** Foundational Python

Learn basic Python scripting, utilizing built-in datatypes, containers, and functionality and how to use comprehensions to speed up iteration. In this module you will also discover how to integrate error handling techniques into scripts and to leverage the itertools and collections modules to manipulate iterables.

**Week 2:** User-Defined Functions and Classes

Understand how to create user-defined functions (UDFs) and utilize built-in features such as args and kwargs to enhance UDFs and use them within comprehensions. You will also learn to create lambda functions, understand what a class is, and how to develop one to perform basic linear regression, as well as using Timeit to profile functions and to find the most performant functions.

**Week 3:** Data Analysis and Manipulation

Learn to load in external data using Pandas and to manipulate data frames for adding and dropping columns and subsetting. You will also use Pandas and Numpy to calculate summary statistics and perform correlation analysis as well as to perform group by operations. Additionally, you will discover how to join and concatenate data frames using Pandas and create visualizations using Seaborn.

**Week 4:** Advanced Data Analysis and Manipulation

Explore what broadcasting is and how to use it to perform matrix and element-wise operations for efficient data manipulation. This module will also teach you to use advanced Pandas concepts to manipulate data frames, such as melt and pivot, perform window functions, and calculate rolling metrics.

**Week 5:** Training and Evaluating Machine Learning Models

Gain the skills to perform feature extraction and transformation using Sklearn and use it to train and evaluate machine-learning models.

**Week 6:** Parallelizing Model Training and Using Multiprocessing

Learn to use Generator to handle large datasets and to perform parallel modeling training using Sklearn. You will also discover how to run programs in parallel using the multiprocessing module.

**Week 7:** Scraping and Threading

Understand how to use Urllib and requests to ping websites, how to use BeautifulSoup to parse html data, as well as how to use a threadpoolexecutor to scrape in parallel.

**Week 8:** Model Deployment

Learn to save and reload trained models and discover how to make batch predictions. You will also be taught how to deploy a model as an API and to monitor models in production.


See also: https://numericalmethodssullivan.github.io/ch-python.html#ch-python

See also: https://realpython.com/python-ai-neural-network/