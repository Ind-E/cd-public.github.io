<style>
  * {
    background-repeat: no-repeat;
    background-attachment: fixed;
  }
</style>

---
title: Enigma
subtitle: "Due Th, Jan 23 before class"
---

# Enigma&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#enigma" role="button" aria-expanded="false" aria-controls = "enigma">Show</a>

::: {#enigma .collapse .multi-collapse}

### Goal: Learn C I/O and strings

- My responsibility
  - I will provide a development Containerfile
    - It will include a reference solution in Python
  - I will provide a testing Containerfile (an autograder)
- Your responsibility
  - You will create a solution in C as a .c file
  - You will save this file as a private GitHub repository
  - You will ensure [cd-public](https://github.com/cd-public/) has view permissions.

|Review:    | Newish:    |
| --------- | ---------- |
|- `podman` | - `curl`   |
|- `vim`    | - stdio    |
|- `gcc`    | - ciphers  |
|- `git`    |            |

- Enigma was a historically significant technology
  - It was a Nazi encryption device, using cyphers
  - It was broken by Turing, gay icon and one of the first and greatest computer scientists
- At Willamette, Enigma is an infamous Intro to Programming assignment
  - Basically it is the first assignment that requires nested for loops
- In this course, Enigma will demonstrated the obscurity/clarity divide
  - In Python, letters and numbers are different things
  - In C, there are no letters or really numbers, just bits and bytes
  - This makes Enigma in C **easier**, despite being a "harder" language.

- You can review the Python assignment if you wish:
  - Write-ups:
    - [Prof. Roberts](https://people.willamette.edu/~esroberts/roberts-enigma/Milestones/)
    - [Prof. Rembold](https://jrembold.github.io/Website_Backup/class_files/cs151/Projects/Project_Enigma.html)
    - [Prof. Calvin](https://cd-public.github.io/courses/old/cs1f24/hws/p4.html)
  - Slides
    - [Prof. Rembold](https://jrembold.github.io/Website_Backup/class_files/cs151/Slides/slides/Ch10_Enigma.html#/say-it-secret)
    - [Prof. Calvin](https://cd-public.github.io/courses/old/cs1f24/slides/wcd1_enigma.html)
  - [Assignment Repository](https://github.com/rembold-cs151-master/Project_Enigma)
- I also provide
  - "Solved": A Python solution
  - "Visual": A text visualizer of the Engima machine's ciphers
  - "Rotors": A text visualizer of the full Enigma machine
- The assignment begins with "char *".




:::

# Solved&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#solved" role="button" aria-expanded="false" aria-controls = "solved">Show</a>


::: {#solved .collapse .multi-collapse}

- Here is a reference solution, with a few tests, in Python. 
- I regard this code as considerably easier to read, test, and understand than most plaintext descriptions.
- I will also do a visual representation.
- The ciphers are sometimes called "rotors" because historically they were implemented as a rotating... cipher.


```py
# constants                       # constant
rs = [                            # rotors
    "BDFHJLCPRTXVZNYEIWGAKMUSQO", # fast
    "AJDKSIRUXBLHWTMCQGZNPYFVOE", # medium
    "EKMFLGDQVZNTOWYHXUSPAIBRCJ", # slow
    "IXUHFEZDAOMTKQJWNSRLCYPBVG"  # reflect
]
A  = ord('A')                     # value of 'A'
NC = len(rs[0])                   # number of characters

# apply a cipher/rotor `r` to a letter `c`
rapply = lambda c, r : r[ord(c) - A]

# invert a cipher/rotor `r`
    # create a list of letters with their index
        # [(r[i],i) for i in range(NC)]
    # sort the list
        # for p in sorted
    # convert indexes to back to letters in the alphabet
        # chr(p[1]+A)
invert = lambda r : [chr(p[1]+A) for p in sorted([(r[i],i) for i in range(NC)])]

# extend the rotor set to include inverted ciphers
    # In reversed order, as well
    # fas med slo ref slo med fas
rs += [invert(r) for r in rs[2::-1]]

# encrypt letter `c` with rotors in default* positions
rotors = lambda c : [c := rapply(c,r) for r in rs][-1]

# default position a,b,c -> r,f,o, respectively
assert([
    rotors('A'), 
    rotors('B'), 
    rotors('C')
] == ['R','F','O'])

# shift letter `c` forward `n` letters in alphabet
nshift = lambda c, n : chr((ord(c) - A + n) % NC + A)

# allow rotor rotations
    # fast spins every letter
    # medi spins every time fast loops back NC->0
    # slow ""               medi ""
shifts = lambda l, n : [
    l % NC, l // NC % NC, l // (NC*NC) % NC, 
    0, 
    l // (NC*NC) % NC, l // NC % NC, l % NC
][n]

# combine shift apply? don't know what to call
shiply = lambda c, n, r : nshift(rapply(nshift(c,n),r),-n)
# or if you prefer
shiply = lambda c, n, r : chr((ord(r[(ord(c)-A+n)%NC])-A-n)%NC+A)

# single letter enigma, with number of previous letters `l`
letter = lambda c, l : [c := shiply(c,shifts(l,i),rs[i]) for i in range(len(rs))][-1]

# phrase
    # enigma starts with an single rotation before first encryption.
enigma = lambda s : "".join([letter(s[i],i+1) for i in range(len(s))])

# test
assert([
    enigma("AAA"), 
    enigma("ABC"), 
    enigma("ZLC")
] == ["ZLC","ZRA","AAA"])
```

:::


# Visual&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#visual" role="button" aria-expanded="false" aria-controls = "visual">Show</a>

::: {#visual .collapse .multi-collapse}

#### Single Cipher

- Visualize a cipher as mapping a A-Z to A-Z.
  - Say, 'E' becomes 'J'


```email
      E
 _____|______________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      J
```

#### Iterative Cipher
- We can apply ciphers iteratively.
  - So the output 'J' of the first cipher is input to the next cipher.

```email{.larger}
 ____________________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher[0]
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      J>>>>J               
 __________|_________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[          |                 ]  
[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # cipher[1]
 ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
           B
```

#### All Ciphers
- Enigma ciphers/rotors are named:
  - Fast
  - Medium
  - Slow
  - Reflect, which has special properties

```email
      E
 _____|______________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      J>>>>J               
 __________|_________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[          |                 ]  
[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium
 ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   B<<<<<<<B
 __|_________________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[  |                         ]
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
 ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   K>>>>>>>>K
 ___________|________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[           |                ]
[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
 ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
            M
```

##### _Reflector_

- We note that with the reflector:
  - If we take the _alphabet_ and find a corresponding letter in the _cipher_, or
  - If we take the _cipher_ and find a corresponding letter in the _alphabet_
  - We get the same letter...
- This is...
  - The special property of the reflector, and
  - How we will re-use the fast, medium, and slow ciphers.

:::: {.columns}

::: {.column}
```email
            K
 ___________|________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[           |                ]
[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
 ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
            M
```
:::

::: {.column}
```email
              K
 _____________|______________
[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
[             |              ]
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾
              M
```
:::

::::

#### Decryption

- After the reflect cipher, values are _decrypted_
  - A letter's place in the _cipher_, not alphabet, is found
  - This location is used to determined the letter in the _alphabet_
  - Essentially, a change from mapping the alphabet to a cipher, to vice versa.
- 'H' comes out of the reflector
  - 'H' is is index 7 letter of the alphabet
  - So in the next cipher, we'll look up the index 7 letter of the _cipher_
  - It is now more helpful to think of an index than a letter - that is what changes here.

```email
            K
 ___________|________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[           |                ]
[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
 ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    M<<<<<<<M
 ___|________________________
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
[   |                        ]
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    M
```

#### Inversion

- We can separately calculate what cipher would correspond to the "inverted" slow cipher.
  - We take all the slow->alphabet pairs
  - We alphabetize the pairs by the first letter
  - The output is no longer alphabetized, as is a new cipher.
- It is left to the student as a design decision whether do
  - "Decrypt" via a provided cipher, or
  - "Invert" a provided cipher, and apply the inverted cipher.
- Students should consider the complexity of both methods.

:::: {.columns}

::: {.column}
```email
    M
 ___|________________________
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
[   |                        ]
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    M
```
:::

::: {.column}
```email
              M
 _____________|______________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[             |              ]
[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1
 ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾
              C
```
:::

::::

#### Iterating Back

- The next cipher is "medium" and its index 7 letter is 'U'
  - 'U' is the index 20 letter of the alphabet.
  
:::: {.columns}

::: {.column}
```email
    M
 ___|________________________
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
[   |                        ]
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    C>>>>>>>>>>>>C
 ________________|____________
[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium
[                |           ]  
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾
                 P
```
:::

::: {.column}
```email
              M
 _____________|______________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[             |              ]
[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1
 ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    C<<<<<<<<<C
 ___|________________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[   |                        ]  
[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1
 ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    P            
```
:::

::::

#### End-to-end

- The entire end-to-end cipher application can be visualized as follows...

:::: {.columns}

::: {.column}

```email
      E
 _____|______________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      J>>>>J               
 __________|_________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[          |                 ]  
[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium
 ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   B<<<<<<<B
 __|_________________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[  |                         ]
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
 ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   K>>>>>>>>K
 ___________|________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[           |                ]
[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
 ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    M<<<<<<<M
 ___|________________________
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
[   |                        ]
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    C>>>>>>>>>>>>C
 ________________|____________
[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium
[                |           ]  
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾
         P<<<<<<<P
 ________|___________________
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast
[        |                   ]  
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
 ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
         H
```

:::

::: {.column}

```email
      E
 _____|______________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      J>>>>J               
 __________|_________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[          |                 ]  
[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium
 ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   B<<<<<<<B
 __|_________________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[  |                         ]
[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow
 ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   K>>>>>>>>K
 ___________|________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[           |                ]
[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
 ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
            M>M
 _____________|______________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[             |              ]
[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1
 ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    C<<<<<<<<<C
 ___|________________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[   |                        ]  
[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1
 ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    P>>>>>>>>>>>>P    
 ________________|___________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[                |           ]  
[ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾
                 H
```



:::

::::

_For the remainder of the write-up, I will assume without loss of generality the usage of inverted ciphers._

:::


# Rotors&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#rotors" role="button" aria-expanded="false" aria-controls = "rotors">Show</a>

::: {#rotors .collapse .multi-collapse}

#### Single Rotor

- Visualize a rotor as mapping a A-Z to A-Z.
  - Say, 'E' becomes 'J'


```email
      E
 _____|______________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      J
```

#### Rotation

- We call these things rotors because they rotate:
  - The mapping from e.g. index _i_ of the input to index _j_ of the output is unalterated
    - For example, 'E' is index 5 and maps to 'J'` at index 10, both of the alphabet
  - However, we can change the rotors as follows:
    - The input index is shifted forward by some shift value _n_
    - This input index is mapped to an output index
    - This output index is shifted backward by the same _n_
- Let's visualize with _n_ = 3

```email
      E
      |>>>
      EFGH
      >>>|
 ________|___________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[        |                   ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher
 ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
         P
      <<<|
      MNOP 
      |<<<
      M
```

#### As ciphers

- It is worth noting this identical to generating ciphers that start an the index _n_ letter of the alphabet and wrap around from Z to A.

:::: {.columns}

::: {.column}

```email
      E
      |
      |>>>
      EFGH
      >>>|
         |
         |
 ________|___________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[        |                   ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher
 ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
         P
         |
      <<<|
      MNOP 
      |<<<
      |
      M
```

:::

::: {.column}

```email
      E
 _____|______________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[     |                      ]  
[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)
 ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      H>>H
 ________|___________________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[        |                   ]  
[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher
 ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
         P>>>>>>>P
 ________________|___________
[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
[                |           ]  
[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾
                 M
```

:::

::::

_For the remainder of the write-up, I will assume without loss of generality that rotations can be understood without considering them to be ciphers._

#### For Enigma

- The Enigma machine triggers rotor rotations every time a letter is encrypted.
- They rotate as follows
  - **Before** a letter is encryped, the fast rotor rotates forward once.
    - So **before the first encryption**, 
      - (_n_ = 0 : A->A) becomes (_n_ = 1 : A->B) before the fast rotor.
    - To understand this, the rotation must be applied at two points:
      - Before and after going through the fast rotor, and
      - Before and after reversing through the fast^-1 rotor.
  - If the fast rotor "loops back" from a rotation from (_n_ = 25 : A->Z) to a non-rotation of (_n_ = 26 = 0 : A->A).
    - The medium rotor advances once, from e.g.  (_n_ = 0 : A->A) to (_n_ = 1 : A->B)
  - When medium loops back, fast advances once.
  - There are no rotations related to the reflector.
- We image we have typed 29 letters:
  - the fast rotor has progressed 29 times and progresses once more before encryption.
    - So shift by _n_ = 30, or _n_ = 30-26 = 4.
  - the medium rotor progresed 1 time, 
  - and slow rotor progressed not at all.
- Steps labelled "adjust" are not computational
  - I change horizontal alignment of letters to align the rotors.
  - This is a visual change only, as it was in "Visual" above.

```email
     X
     |
=====|===========================================
=    X                                          =
=    |>>>>                                      =
=    XYZAB                           # rotate   =
=    >>>>|                                      =
=        B                                      =
=      __|_________________________             =
=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = 
=     [  |                         ]            = # fast
=     [ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast     =
=      ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =
=        D                                      =
=    <<<<|                                      =
=    ZABCD                           # rotate   =
=    |<<<<                                      =
=    Z                                          =
=====|===========================================
     |
     Z>Z                             # adjust
       |
=======|=========================================
=      Z                                        =
=      |>                                       =
=      ZA                            # rotate   =
=      >|                                       =
=       A                                       =
=      _|__________________________             =
=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =
=     [ |                          ]            = # medium
=     [ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium   =
=      ‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =
=       A                                       =
=      <|                                       =
=      ZA                            # rotate   =
=      |<                                       =
=      Z                                        =
=======|=========================================
       |
       Z>>>>>>>>>>>>>>>>>>>>>>>>>Z   # adjust
                                 |
=================================|===============
=                                Z              =
=                                |              =
=                                Z   # rotate   =
=                                |              =
=                                Z              =
=      __________________________|_             =
=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =
=     [                          | ]            = # slow
=     [ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow     =
=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾             =
=                                J              =
=                                |              =
=                                J   # rotate   =
=                                |              =
=                                J              =
=================================|===============
                                 |
                 J<<<<<<<<<<<<<<<J   # adjust
       __________|_________________
      [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet
      [          |                 ]              # reflect
      [ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect
       ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                 O>>>>O              # adjust
                      |
======================|==========================
=                     O                         =
=                     |                         =
=                     O              # rotate   =
=                     |                         =
=                     O                         =
=      _______________|____________             =
=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =
=     [               |            ]            = # slow
=     [ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1  =
=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾             =
=                     M                         =
=                     |                         =
=                     M              # rotate   =
=                     |                         =
=                     M                         =
======================|==========================
                      |
                    M<M              # adjust
                    |
====================|=============================
=                   M                           =
=                   |>                          =
=                   MN               # rotate   =
=                   >|                          =
=                    N                          =
=      ______________|_____________             =
=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =
=     [ |            |             ]            = # medium
=     [ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1=
=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾             =
=                    T                          =
=                   <|                          =
=                   ST               # rotate   =
=                   |<                          =
=                   S                           =
====================|============================
                    |
                    S>>>>>S
                          |
==========================|======================
=                         |                     =
=                         S                     =
=                         |>>>>      # rotate   =
=                         STUVW                 =
=                         >>>>|                 =
=      _______________________|____             =
=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = 
=     [                       |    ]            = # fast
=     [ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1  =
=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾             =
=                             R                 =
=                         <<<<|                 =
=                         NOPQR       # rotate  =
=                         |<<<<                 =
=                         N                     =
==========================|======================
                          |
                          N

```

:::