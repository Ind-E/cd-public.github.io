<style>
  * {
    background-repeat: no-repeat;
    background-attachment: fixed;
  }
</style>

---
title: Cipher
subtitle: "Week 0x0"
---

# Intro&nbsp;&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#intro" role="button" aria-expanded="false" aria-controls="intro">Show</a>

::: {#intro .collapse .multi-collapse}

|Review:    | Introduce:   |
| --------- | ------------ |
|- `podman` | - Alpine     |
|- `vim`    | - Cipher     |
|- `gcc`    | - Enigma     |
|- `git`    | - Printf     |

### Requirements

- You should have Podman installed.<br>
- If you are on Windows, you should have WSL installed.
<blockquote>

**TODO** (windows only)
```bash
wsl --install -d ubuntu
```
</blockquote>

:::

# Podman&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#podman" role="button" aria-expanded="false" aria-controls = "podman">Show</a>

::: {#podman .collapse .multi-collapse}

- `podman` is a command, like `python`
  - Like `python` we can provide arguments
  - Unlike `python` we provide further commands, not just a .py file

<blockquote>

**TODO**
```bash
podman
```
</blockquote>
 

```email
C:\Users\cd-desk>podman
Manage pods, containers and images

Usage:
  podman [options] [command]

Available Commands:
  attach      Attach to a running container
  build       Build an image using instructions from Containerfiles
  ```

- If this doesn't work, make sure Podman Desktop is running. 
- If that doesn't work, make sure you installed Podman Desktop with the Podman Installer. 
- If that doesn't work, make sure you aren't a Windows users with WSL installed.
  - Windows users may use Podman within WSL at their discretion.

## Run

- First thing we'll do in Podman is ` podman run`

<blockquote>

**TODO**
```bash
podman run
```
</blockquote>

It should look something like this:


```email
C:\Users\cd-desk>podman run
Error: requires at least 1 arg(s), only received 0
```

## Images

- The thing we run is called an image
- We'll use a sample image named Python
  - You'll never guess what it does (Python)
- Students may wish to specify "python:alpine"
  - That is the python command in the alpine operating system.
  - This is a 20x smaller image, so 20x faster download
  - It is on a less common Linux OS (alpine) that may be harder to use.

<blockquote>

**TODO**
```bash
podman run python:alpine
```
</blockquote>

It should look something like this:

```email
C:\Users\cd-desk>podman run python:alpine
Resolved "python" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf)
Trying to pull docker.io/library/python:latest...
Getting image source signatures
Copying blob sha256:abab87fa45d0b95db90eb47059d7e87f5a69281fe5d76fcdb7889ec5c310f44c
...
Writing manifest to image destination

C:\Users\cd-desk>
  ```

## Just do `-it`

- We downloaded an image and ran it as a container but...
  - We didn't ask the container to do anything
  - So it exits instantly
  - Of note, we only have to download once (image) to run many times (container)
- To work within the container `run -it` for "interactive terminal"

<blockquote>

**TODO**
```bash
podman run -it python:alpine
```
</blockquote>

It should look something like this:


```email
C:\Users\cd-desk>podman run -it python
Python 3.13.1 (main, Dec  4 2024, 20:40:27) [GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```
:::


# Alpine&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#alpine" role="button" aria-expanded="false" aria-controls = "alpine">Show</a>

::: {#alpine .collapse .multi-collapse}

To actually do anything useful in a container, it would be nice to do a bit more setup. Specifically, I think we'd like to:

- Be able to setup a container once, then use it.
- Move files into and out of a container.

### Build

#### Containerfiles

_This section concerns something I call "Containerfiles" but are more commonly referred to as "Dockerfiles", though I believe this is changing over time. If you get stuck, it may be easier to look up "Dockerfiles" documentation - I've been looking at both._

Usually when I'm using a container, I need something for which I can't simply find a default image. In my case, I specifically want a container with something called a "Containerfile". Here is a minimal example:

```{.email filename="Containerfile"}
FROM alpine
```

Especially when getting started with containers, I use Alpine as my base image because it's a lightweight Linux operating system that (tends to) have everything I need.

I would save such a "Containerfile" wherever I save work this class. For me, that is usually inside a class-specific directory inside my home directory in the Linux filesystem - including on Windows, where I do my coursework within the WSL filesystem. My setup looks something like this:

<blockquote>

**TODO**
```bash
echo "FROM alpine" > Containerfile
```
</blockquote>

In addition to this command, I do a bit of file management. Ultimately for me, it looks something like this:

```email
user@DESKTOP-THMS2PJ:~$ mkdir crypto
user@DESKTOP-THMS2PJ:~$ cd crypto/
user@DESKTOP-THMS2PJ:~/crypto$ echo "FROM alpine" > Containerfile
user@DESKTOP-THMS2PJ:~/crypto$ pwd
/home/user/crypto
user@DESKTOP-THMS2PJ:~/crypto$ ls
Containerfile
```

#### Build

:::

# GCC&nbsp;&nbsp;&nbsp;&nbsp;<a class="btn btn-primary" data-bs-toggle="collapse" href="#gcc" role="button" aria-expanded="false" aria-controls = "gcc">Show</a>

::: {#gcc .collapse .multi-collapse}

## First Python

We consider a minimal comparison between Python "Hello, World!" which is interpreted, and C "Hello, World!" which is compiled and executed.

We perform all steps via `podman` containers 
- A container instance of the "python" image
- A container instance of the "gcc" images

The `python` *interpreter* runs a Python (.py) *script*

**#TODO**
Open your command line and run these three commands, in order:

  1. ```bash
  podman run -it python
  ```
  2. ```bash
echo "print(\"hello world\")" > test.py
```
  3. ```bash
python test.py
```

It should look something like this:

```email
C:\Users>podman run -it python /bin/bash
root@bc044961feaa:/# echo "print(\"hello world\")" > test.py
root@bc044961feaa:/# python test.py
hello world
root@bc044961feaa:/# 
```
- It is perhaps confusing the name of the command and language are the same for Python but not for C.
- It so happens there are other commands and corresponding images that can run Python, the most famous being PyPy

**PyPy**: The `pypy` *interpreter* runs a Python *script*
```email
PS C:\Users\cd-desk> podman run -it pypy /bin/bash
root@c442afe2c73d:/# echo "print(\"hello world\")" > test.py
root@c442afe2c73d:/# pypy test.py
hello world
root@c442afe2c73d:/# 
```
Both Python and PyPy are compiled into executables with GCC.

## GCC itself

**GCC** A *compiler* generating an *executable*
  - Then running the executable
  
```
C:\Users\cd-desk>podman run -it gcc
root@439ba0c37499:/# echo -e "#include <stdio.h>\nvoid main() { printf(\"hello world\"); }" > test.c
root@439ba0c37499:/# gcc test.c -o test
root@439ba0c37499:/# ./test
hello worldroot@439ba0c37499:/#
```

## Annotation

1. Invoke podman with a gcc image to get access to the `gcc` compiler
  - By default, `-it` here gives us bash, the Linux command line
  - We note this runs on **host** machine
    - We can tell its a Window device from the PATH starting with `C:`

```bash
C:\Users\cd-desk>podman run -it gcc
```

2. I use Linux `echo` and escape characters to copy this into a file.
  - We can tell this is in a Linux device from the username `root`
  - This means we can use the `echo`, and it's `-e` flag
    - We need `-e` to include newline `\n` in an echo
    - We need newlines in our C code for it to work

```bash
root@439ba0c37499:/# echo -e "#include <stdio.h>\nvoid main() { printf(\"hello world\"); }" > test.c
```
  - For the sake of this demo, I wrote a C program in one line.
    - It should look like this:
      ```C
      #include <stdio.h>
  
      void main() { 
        printf("hello world"); 
      }
      ```
3. I use `gcc testc` to compile the C code in "test.c" into an executable
  - I use `-o test` to name the executable "test"
  - This is optional - the default executable name is "a.out"
```
root@439ba0c37499:/# gcc test.c -o test
```

4. I use the `./` prefix with the executable name to run the executable.
  - It prints "hello world" then exits
  - Of note - printing in C does not automatically add a new line.
```
root@439ba0c37499:/# ./test
hello worldroot@439ba0c37499:/#
```

:::