[
  {
    "objectID": "printb.html",
    "href": "printb.html",
    "title": "Printb",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- for\n- bits\n\n\n- C types\n- bytes\n\n\n- booleans\n- operators\n\n\n\n\nIn addition to large amounts of contextual and background material, there are three main exercises for this lab:\n\nScript\nPrintb\nit/ool"
  },
  {
    "objectID": "printb.html#section",
    "href": "printb.html#section",
    "title": "Printb",
    "section": "==",
    "text": "==\n\nTo begin, we recall Enigma:\n\nUnlike Python booleans, C has no boolean type.\n\nRather it has truthiness, akin to Python if statements with numerical conditions.\nThe numerical value zero is false.\nAll other numerical values are true.\n\n\nThe simplest way for me to understand bools is via equality testing\n\nFirst, Python\n\n\n\nVerify install\n\nBefore anything else, I verify I have an install of Python3.\n\npython3 --version\n\nI found I had 3.12.3 - not great, not terrible.\n\n\n\nPython -c\n\nWe can evaluate a single Python expression - a single line of code - via -c\n\npython3 -c \"print(1 == 1)\"\n\nAs expected, this prints True - capital “T”, lowercase “rue”.\n\nWe’ve seen this before.\n\n\n\n\nFormat print\n\nHowever, this isn’t exactly true-to-form\nPython print is not a format print by default.\nFor equivalence, we must use a format print.\nWe can naively use a format without specifying a type…\n\npython3 -c 'print(f\"{1==1}\")' \n\nThis still gives True, but also has no C equivalent!\n\nWe have to provide some letter to determine how a value is printed\n\n\n\n\n2 %b | ! 2 %b\n\nJava\n\nThere is a language called Java, technically.\n\n&lt;loud grumbling&gt;\n\nIt has a format print, and uses %b for booleans, I hear.\n\nCredit Stack Overflow\n\nYou can test if you want:\n\nYoink a Java container.\n\npodman run -it openjdk\n\nIt will drop you into something called jshell\nWe can do a quick Java printf\n\nSystem.out.printf(\"1 == 1 is %b\\n\",1 == 1);\n\nI got this output, which I don’t understand at all\n\n1 == 1 is true\n$1 ==&gt; java.io.PrintStream@34c45dca\n\nIt does say “true” though, that’s fun!\nApparently you can use the following to leave jshell\n\n/ex\n\nI cleaned the Java off my system with\n\npodman system prune\n\nI made sure it was gone with\n\npodman images\n\n\n\nPythonic b\n\nAfter that digression, let’s try b in Python\n\npython3 -c 'print(f\"{(1==1):b}\")' \n\nIt prints, of all things:\n\n1\n\nWell, that’s interesting.\n\nIf you want some fun first\n\npython3 -c 'print(f\"{2:b} or not {2:b}\")'"
  },
  {
    "objectID": "macros.html",
    "href": "macros.html",
    "title": "Macros",
    "section": "",
    "text": "Review Show\n\n\nGoal: Think about C variables as bits\n\nMy responsibility\n\nI will provide a reference solution in Python\nI will provide an autograder Containerfile\n\nYour responsibility\n\nYou will create a solution in C as an “macros.c” file\nYou will create a private GitHub repository named “crypto”\nYou will create a folder in this repository named “macros”\nYou will store your “macros.c” file in the “macros” folder.\nYou will add me as a collaborator through the GitHub web application\n\n\nMy GitHub account cd-public is attached to my @wu address.\n\n\nIf you would like to fork an existing repository, use this one:\n\nhttps://github.com/cd-c89/crypto\n\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- bits\n- Macros\n\n\n- bytes\n- Sizeof\n\n\n- operators\n\n\n\n\n\n\n\n\nPodman Show\n\n\n\nSetup\n\nFor this lab, I used the following Containerfile\n\nSame as lecture\nI didn’t even rename it\n\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim\n\n\nI could build with the following, but I already had it built:\n\npodman build -t c89_99 .\n\nI conducted the full hw within a single container’s vim instance.\n\npodman run -it c89_99 vim macros.c\n\n\n\nGitHub Show\n\nRead this in GitHub Docs\n\nInviting collaborators to a personal repository\nYou can add unlimited collaborators on public and private repositories.\n\nAbout collaboration in a personal repository\nTo collaborate with users in a repository that belongs to your personal account on GitHub, you can invite the users as collaborators.\nIf you want to grant more granular access to the repository, you can create a repository within an organization. For more information, see Access permissions on GitHub.\n\n\nInviting a collaborator to a personal repository\nYou can send an invitation to collaborate in your repository directly to someone on GitHub, or to the person’s email address..\nGitHub limits the number of people who can be invited to a repository within a 24-hour period. If you exceed this limit, either wait 24 hours or create an organization to collaborate with more people. For more information, see Creating a new organization from scratch.\n\nAsk for the username of the person you’re inviting as a collaborator. If they don’t have a username yet, they can sign up for GitHub. For more information, see Creating an account on GitHub.{1. On GitHub, navigate to the main page of the repository.\nUnder your repository name, click Settings. If you cannot see the “Settings” tab, select the dropdown menu, then click Settings. \nIn the “Access” section of the sidebar, click Collaborators.\nClick Add people.\nIn the search field, start typing the name of person you want to invite, then click a name in the list of matches.\nClick Add NAME to REPOSITORY.\nThe user will receive an email inviting them to the repository. Once they accept your invitation, they will have collaborator access to your repository.\n\n\n\n\n\n\nSketch Show\n\n\nThe purpose of this homework is to write four (4) bitwise macros\n\nTwo trenanry operations\n\nChoice\nMedian, also called Majority\n\nAnd two rotations\n\nRight, which sees use, and\nLeft, as an academic exercise\n\n\nThese will see use in the next assignment, SHA256\nThey are logically and historically interesting within cryptography\nThere is no graceful way, to my knowledge, to describe these on bits in Python\n\nI will provide pseudo code over tuples of integers.\nI provide conversion functions from strings.\nI am aware of plenty non-graceful ways, but\n\nIf you want to show me one you like send me a DM\n\n\nFor this homework, you will need some form of bit printing\n\nIf your printb from lab is struggling, use %b in debug\nJust remove it before your turn in your work.\n\nWe next introduce macros.\n\n\n\n\nMacros Show\n\n\nThe purpose of this homework is to write four (4) bitwise macros.\nC macros exist in the “preproprocessor”.\nHere is an example of preprocessor directive you have written already:\n\n#include &lt;stdio.h&gt;\n\nYou probably also have used a define directive\n\n#define ABCS \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nThe define directive is used to define something called a macro.\n\nWhen used to define constants, those are just macros that return a value.\n\nWe can also define macros that accept arguments, the most famous are MIN and MAX\n\nI grabbed these from OpenBSD\nThey have fallen out of favor for a complicated reason.\nIn general, use functions.\nWe use macros to learn about them, not to learn to write them.\n\n\n/* Macros for min/max. */\n#define MIN(a,b) (((a)&lt;(b))?(a):(b))\n#define MAX(a,b) (((a)&gt;(b))?(a):(b))\n\nI’d encourage you to play around a bit with these macros.\n\nYou don’t need to fully understand before diving into choice, median, rotate.\nBut a little background can help.\n\n\nint x = 50;\nint a = 'a';\nprintf(\"%d\\n\", MAX(x++,a++))\n\nIn general, you want to use a lot of parens in macros.\n\nTry some things out to try to see why.\n\n\n\n\n\nChoice Show\n\n\nHere I provide Pythonic boolean choice and bitwise choice, and C boolean choice.\nYou will need C bitwise choice.\nChoice is sometimes also referred to as the “ternary operator”\n\nMost famously in .js\nThis is… potentially confusing.\nIt is a ternary operator.\nThe Python operator is non-standard and intentionally ugly.\n\n\n\n\n\nmacros.py\n\n# ref: choice := (e and f) xor ((not e) and g)\n# src: https://en.wikipedia.org/wiki/SHA-2\n\n# We just tell Python the ints are bools\n# We just use \"!=\" as xor\n\ndef _choice(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(f if e else g)\n    # return int((e and f) != ((not e) and g))\n\nimport itertools\n\ntester = list(itertools.product([0, 1],repeat=3))\n\nprint(\" === Boolean Choice === \")\n[print('_choice'+str(test), '-&gt;', _choice(*test)) for test in tester]\n\narrays = (tuple(zip(*tester)))\n\ndef choice(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_choice(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\n# This was ugly\n# print('choice'+str(arrays), '-&gt;', choice(*arrays))\n\n# pretty print\nbitstr = lambda bits : \"\".join([str(b) for b in bits])\nbsstrs = lambda arrs : str(tuple(bitstr(bits) for bits in arrs))\nprint(\" === Bitwise Choice === \")\nprint('choice'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(choice(*arrays))+\"'\")\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Choice === \n_choice(0, 0, 0) -&gt; 0\n_choice(0, 0, 1) -&gt; 1\n_choice(0, 1, 0) -&gt; 0\n_choice(0, 1, 1) -&gt; 1\n_choice(1, 0, 0) -&gt; 0\n_choice(1, 0, 1) -&gt; 0\n_choice(1, 1, 0) -&gt; 1\n_choice(1, 1, 1) -&gt; 1\n === Bitwise Choice ===\nchoice('00001111', '00110011', '01010101') -&gt; '01010011'\n\nThe following defines a macro for boolean choice.\n\nThough not particularly gracefully.\n\n\n/* Macro for boolean choice. */\n#define CHOICE(e,f,g) ((e)?(f):(g))\n\nUpdate the macro to perform bitwise choice.\n\nIt should be a single line macro.\nIt should use bitwise operators.\n\n\n\n\n\nMedian Show\n\n\nHere I provide Pythonic boolean median and bitwise median, and C boolean median.\nYou will need C bitwise median.\nI will take it as given you know what a median is.\nThe following code is appended to “macros.py”\n\n\n\n\nmacros.py\n\nimport numpy as np\n\ndef _median(e:bool, f:bool, g:bool) -&gt; bool:\n    return int(np.median([e,f,g]))\n\nprint(\" === Boolean Median === \")\n[print('_median'+str(test), '-&gt;', _median(*test)) for test in tester]\n\ndef median(e:tuple[bool], f:tuple[bool], g:tuple[bool]) -&gt; tuple[bool]:\n    return tuple(_median(_e, _f, _g) for _e, _f, _g in zip(e,f,g))\n\nprint(\" === Bitwise Median === \")\nprint('median'+bsstrs(arrays), '-&gt;', \"'\"+bitstr(median(*arrays))+\"'\")\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Boolean Median === \n_median(0, 0, 0) -&gt; 0\n_median(0, 0, 1) -&gt; 0\n_median(0, 1, 0) -&gt; 0\n_median(0, 1, 1) -&gt; 1\n_median(1, 0, 0) -&gt; 0\n_median(1, 0, 1) -&gt; 1\n_median(1, 1, 0) -&gt; 1\n_median(1, 1, 1) -&gt; 1\n === Bitwise Median ===\nmedian('00001111', '00110011', '01010101') -&gt; '00010111'\n\nThe following defines a macro for boolean median.\n\nThough not particularly gracefully.\nC !! is very close to Python bool()\n\n\n/* Macro for boolean median. */\n#define MEDIAN(e,f,g) ((!!(e) + !!(f) + !!(g)) &gt; 1)\n\nUpdate the macro to perform bitwise median.\n\nIt should be a single line macro.\nIt should use bitwise operators.\n\n\n\n\n\nSizeof Show\n\n\nYou may have noticed something while writing printb:\n\nThat not know how many bits you had was annoying.\n\nNot to worry, C can help us.\n\nA char is always exactly 8 bits\n\nThis is also called one byte\nIt is trivial to verifying this experimentally.\n\nEverything else is some multiple of char\nTo find how many char’s big something is, use sizeof\n\nI compile with -w to silence an error.\n\nsizeof doesn’t run an integer, so we shouldn’t print with %d\nMore latter.\n\n\n$ cat sizeof.c\n#include &lt;stdio.h&gt;\n\nint main() {\n        char c = 1;\n        int n = 2;\n        char s[8] = {1,2,3,4,5,6,7,8};\n        printf(\"sizeof(c) = %d, sizeof(n) = %d, sizeof(s) = %d\\n\",\n                        sizeof(c),\n                        sizeof(n),\n                        sizeof(s)\n              );\n        return 0;\n}\n$ gcc sizeof.c -w\n$ ./a.out\nsizeof(c) = 1, sizeof(n) = 4, sizeof(s) = 8\n\nTo make introducing rotate easier, all examples will be on char\nRotate is used in cryptography on things 32 bits in size.\n\nUsually an int is this big, but not always.\nThere’s ways to manage this.\n\nI will test your rotate code on the unsigned int type, which is usually 32 bits in size.\n\nYou can assume 32, for now.\n\n\n\n\n\nRotate Show\n\n\nWe recall cipher rotation.\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n ____________________________\n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n\nWe understand this as:\n\nTake an array and,\nTake a numerical value…\n\nof less than the length of the array.\n\nMaintain all elements of the array, but\n\nIncrease their index by the numerical value, and\nIndices greater than array length wrap around…\n\nUsing modulo array length.\n\n\n\nWe apply this same idea to the notion of boolean arrays.\n\nA unsigned int is a boolean array of some length.\nIt is possible to determine these lengths.\n\nHere is a Python bitwise rotate on boolean arrays of size 8.\n\n\n\n\nmacros.py\n\ndef rotleft(a:tuple[bool], n:int) -&gt; tuple[bool]:\n    return a[n:] + a[:n]\n\nprint(\" === Bitwise Rotleft === \")\narray = (0,0,1,0,1,1,0,1)\nfor n in range(len(arrays[0])+1):\n    print('rotleft('+bitstr(array)+','+str(n)+') -&gt;', bitstr(rotate(array,n)))\n\n\n\nYou can run it yourself, but here is the output for reference.\n\n === Bitwise Rotleft ===\nrotleft(00101101,0) -&gt; 00101101\nrotleft(00101101,1) -&gt; 01011010\nrotleft(00101101,2) -&gt; 10110100\nrotleft(00101101,3) -&gt; 01101001\nrotleft(00101101,4) -&gt; 11010010\nrotleft(00101101,5) -&gt; 10100101\nrotleft(00101101,6) -&gt; 01001011\nrotleft(00101101,7) -&gt; 10010110\nrotleft(00101101,8) -&gt; 00101101\n\nWe note that this forms a “backward” or “leftward” rotate.\n\nThis is a non-standard rotate, often called lotate or rotleft\nA future assignment will use a “forward” or “rightward” rotate.\n\nWithout showing code, it would look like this.\n\n === Bitwise Rotate ===\nrotate(00101101,0) -&gt; 00101101\nrotate(00101101,1) -&gt; 10010110\nrotate(00101101,2) -&gt; 01001011\nrotate(00101101,3) -&gt; 10100101\nrotate(00101101,4) -&gt; 11010010\nrotate(00101101,5) -&gt; 01101001\nrotate(00101101,6) -&gt; 10110100\nrotate(00101101,7) -&gt; 01011010\nrotate(00101101,8) -&gt; 00101101\n\nNote:\n\nThe C language bitwise operations often seem quite unstable.\n\nIt is a virtual certainty you will encounter pernicious bugs.\nUse unsigned int or just unsigned to avoid negative shenanigans.\nPrint everything all the time.\nLiberally consult printf and C language documentation.\nAsk questions early and often.\n\n\n\n\nReference implementation\n\nYour task is to use bitwise operators to write a rotate macro\nTo test your code, here is a function using something called “assembly”.\nSee the enrichment lecture to learn more.\nThis should work as a drop-in reference implementation.\n\nIt is the implementation used by the autograder.\n\n\nunsigned rotate(unsigned val, unsigned amt) {\n        asm(\"rorl %%cl, %0\" : \"+r\" (val) : \"c\" (amt));\n        return val;\n}"
  },
  {
    "objectID": "c89_99.html",
    "href": "c89_99.html",
    "title": "C89/99",
    "section": "",
    "text": "Announcements\n\nWelcome to variously CS 276/CS 540\nAction Items:\n\nGet out our feelings on the Enigma assignment\n\nWe are learning by doing.\n\nNext homework coming out now - Macros\n\n\n\n\nHomework\n\nThe first homework, “Enigma”, is due when class starts Th of Week 0x1\nThe next homework, “Macros”, is ready at any time\n\nFiddling with bits, building on the lab, etc.\nApplies our learnings from today.\n\n\n\n\nToday\n\nReintroduce the technologies\n\npodman\nvim\ngcc\ngit\n\n\n\n\nWhat is Podman?\n\nDefinition:\n\nPlatform to develop, ship, and run applications in isolated containers.\n\nBenefits:\n\nPortability, consistency across environments.\n\nEditorializing:\n\nProbably all code should be written in a container now that they exist.\n\n\n\n\nIn practice:\n\nWindows only\n\nRun wsl --install -d ubuntu command once\n\nWindows+Mac:\n\nUse Podman Installer once\nLaunch Podman Desktop each time you code\nUse podman commands\n\nLinux:\n\nHave fun with your package manager.\n\n\n\n\nPodman\n\nPodman solves the problem of writing code on one computer and running it another.\nSimply specify a Podman image\n\na description of a imaginary computer\n\nPodman will pretend to be that computer\nWe can run code “inside” Podman\n\nCode in the container can’t tell it’s running inside Podman\n\n\n\n\nImages\n\nSomething we podman run -it is an image\n\nIt is a template that corresponds to many possible pretend computers\nI think of them like object oriented class\nThey define something that could be\n\n\n\n\nContainers\n\nEach time we run said command, we have a different container\n\nThey have different file systems\nThings we install don’t persist to future run instances.\nI think of them like objects of a class\nLike ‘1’ instead of ‘integer’\nThey are actually existing, running code.\n\n\n\n\nReuse\n\nOn Enigma, probably:\n\nYou opened a container.\nYou wrote some code in vim.\nYou compiled the code.\nYou ran the executable.\nThe executable deorbited a space station. /s\nYou closed the container and went to touch grass.\n\n\n\n\nAttach\n\nAfter touching grass, you\n\nCame back to your PC\nHad no graceful way to continue working on the code you wrote.\n\nWe solve this with attachment and detachment.\n\n\n\nServers\n\nOne of the most common ways to use containers is web dev.\nThey are easier to think of as:\n\nA program, which\nHosts a webpage, which\nHappens to need to run somewhere\n\nThat somewhere is a command line\nInside a pretend computer (container).\n\n\n\n\n\nSample\n\nDocker maintains a sample container.\n\nPodman is busy being free and open source.\n\nTry this:\n\npodman run -d -p 8080:80 docker/welcome-to-docker\n\nYou can probably find it at this link:\n\nhttp://127.0.0.1:8080/\n\n\n\n\nBreakdown\n\n\n\nCommand\nExplanation\n\n\n\n\npodman\ndo something with containers\n\n\nrun\nrun a new container\n\n\n-d\ndetach - we’ll cover this next\n\n\n-p\nThis is port forward…\n\n\n8080:80\n80 is where websites usually live\n\n\n\n8080 is where we went (:8080)\n\n\ndocker/...\nName of an image\n\n\n\n\n\nPorts\n\nPorts aren’t the point, but\nWe should demystify.\nChange 8080:80 to 8083:80\n\npodman run -d -p 8083:80 docker/welcome-to-docker\n\nChange the link as well.\n\nhttp://127.0.0.1:8083/\n\n\n\n\nTwo pages\n\nWait a minute…\n\nThere’s a webpage at 8080\nThere’s a webpage at 8083\nThey’re both from the same image.\nThey were started in the same command line (maybe)\n\nThat is two containers running concurrently.\n\nEnter -d\n\n\n\n\nDetach\n\nWhen we run an image with the -d flag, it:\n\nCreated and run as any other container, but\nRuns “in the background”\n\nControl does not change to container\nIt runs only its start command\nIt’s just like a remote web server.\n\n\n\n\n\nDetach Dev\n\nA perhaps nicer way to write code is\n\nCreate and detach a container\nLeave it running or whatever\nUse other podman commands to:\n\nPop into the container and e.g. vim\nTransfer files in our out\nPause and restart to save resources.\n\n\n\n\n\nps\n\nWhen fiddling about with containers…\n\nIt’s good to know who they are (names)\nAnd what they do (command)\n\nWe can use podman ps\n\npodman ps\n\nWe see two servers (nginx) running\n\nCONTAINER ID  IMAGE                                      COMMAND               CREATED        STATUS        PORTS                         NAMES\n7d6af09131b5  docker.io/docker/welcome-to-docker:latest  nginx -g daemon o...  2 minutes ago  Up 2 minutes  0.0.0.0:8080-&gt;80/tcp, 80/tcp  confident_darwin\n2e1b9f844dcd  docker.io/docker/welcome-to-docker:latest  nginx -g daemon o...  2 minutes ago  Up 2 minutes  0.0.0.0:8083-&gt;80/tcp, 80/tcp  adoring_shamir\n\n\nps -a\n\nYou have probably also made many containers\npodman ps -a to see old containers.\n\npodman ps -a\n\nI had many such containers!\n\n4 GB worth, to be exact\n\nClean them all up with prune\n\npodman system prune\n\nSystem = containers, images, everything\n\n\n\nexec -it\n\nIf there’s a detached container running\nWe can execute commands in that container.\nYou only have to specify enough of the name or id to be unique.\n\nI had a server at 8080 beginning with id 7…\n\npodman exec -it 7d echo hello\nThis returns hello, directly, without switching into the container.\n\n\n\n/bin/sh\n\nSo far, I haven’t found a container without /bin/sh\nThis is the Linux command line, more or less\n\nbash &gt; sh, but sometimes only sh available\n\nWe can get an interactive command prompt via\n\npodman exec -it 7d /bin/sh\n\nThis is roughly the same as run -it\n\nBut on an existing container, not a base image\n\n\n\n\nNOTE\n\nIn this example, a webserver is kept running.\nBy default, containers can stop running.\nIf a container isn’t under podman ps:\n\nFind it with podman ps -a\nStart it with podman start by name\n\nRestarts the last container with vim:\n\npodman start -l ; podman exec -it -l vim \n\n\nvim\n\nI’ve adopted a strong preference for just using vim\n\nWhen I exit vim, I implicitly exit the container.\nFeels better than typing exit, to me\n\nSo if we create an image with vim, we can\n\npodman exec -it 𝘪𝘮𝘢𝘨𝘦_𝘯𝘢𝘮𝘦 vim\n\nAnd go from there.\n\n\n\nToday\n\nReintroduce the technologies\n\n✓ podman\nvim\ngcc\ngit\n\n\n\n\nIDEs\n\nAt some point in time, code started being written in IDEs.\n\nIntegrated design environments.\nTo me, the first one was Eclipse (for Java)\n\nThat time was shortly before the 2008 financial crises\n\nI’m not saying it’s related.\nDon’t put in the course evals I blame Eclipse for the Great Recession\n\n\n\n\nWhy Vim fr tho?\n\nIt is a command at command line\nIt can be installed in containers\n\n\n\nContainerfile\n\nHere’s the “Containerfile” I’m using today:\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim -y\n\n\n\nUbuntu\n\nI use Ubuntu\n\n\n\nContainerfile\n\nFROM ubuntu\n\n\nIt’s a bit annoying Alpine requires separately grabbing libc to print\n\n\n\napt\n\nUbuntu uses apt to manage packages, like gcc and vim\nImages are notorious for having out-of-date package listings\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update\n\n\nThis tells Ubuntu to look for the latest & greatest\n\n\n\n&&\n\nWe use && to update and install at once\nWe use apt install to… install gcc from apt\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc vim -y\n\n\nThis avoids a container updating, going to sleep, and packages falling out of date.\n\nApparently that actually happens on cloud, somehow\n\n\n\n\n-y\n\nWe list whatever other packages we need and also…\n-y as by default apt asks us if we’re sure\n\n\n\nContainerfile\n\nFROM ubuntu\n\nRUN apt update && apt install gcc\n\n\nWithout -y, apt will get stuck waiting for us to type\n\nWe often use podman in scripts or commands where it gets stuck, so use -y\n\n\n\n\nUsage\n\nI usually enter a container via\n\npodman exec -it 𝘪𝘮𝘢𝘨𝘦_𝘯𝘢𝘮𝘦 vim\n\nOr often with a filename\n\npodman exec -it 𝘪𝘮𝘢𝘨𝘦_𝘯𝘢𝘮𝘦 vim samp.c\n\nFrom there I do a few things…\n\n\n\nFirst window\n\nIt looks like this:\n\n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n\"samp.c\" [New]                       0,0-1         All\n\n\nInsert mode\n\nPress i to enter “insert mode”\n\n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n-- INSERT --                         0,1           All\n\n\nWrite some code\n\nType every letter perfectly on the first try.\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        if (argc) {\n                printf(\"%s\\n\", argv[1]);\n        }\n        return 0;\n}                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n-- INSERT --                         8,2           All\n\n\n:term\n\nOpen the vim terminal emulator\n\nPress ESC\nType :term\nPress ENTER\nWe’ll go step by step\n\n\n\n\nPress ESC\n\nLooks like this (mostly INSERT is gone)\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        if (argc) {\n                printf(\"%s\\n\", argv[1]);\n        }\n        return 0;\n}                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n                                     8,1           All \n\n\nType “:term”\n\nThe colon : is meaningful in vim\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        if (argc) {\n                printf(\"%s\\n\", argv[1]);\n        }\n        return 0;\n}                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n~                                                      \n:term                                                  \n\n\nPress ENTER\n\nAll kinds of colors could happen here too:\n\n#\n\n\n\n\n\n!sh [running]                        0,0-1          All\nint main(int argc, char **argv) {\n        if (argc) {                                                    \n                printf(\"%s\\n\", argv[1]);                       \n        }                                                      \n        return 0;                                      \n}                                                      \nsamp.c [+]                           8,1            Bot\n:term                                                  \n\n\nUse terminal\n\nLet’s compile with gcc\n\n# gcc samp.c\ncc1: fatal error: samp.c: No such file or directory\ncompilation terminated.\n#                                   \n                                    \n                                    \n!sh [running]                        0,0-1          All\nint main(int argc, char **argv) {\n        if (argc) {                                    \n                printf(\"%s\\n\", argv[1]);                       \n        }                                                      \n        return 0;                                      \n}                                                      \nsamp.c [+]                           8,1            Bot\n:term                                                  \n\n\nWrite to container\n\nWe didn’t save samp.c, we will:\n\nUse CTRL+w to change “window”\nWe will use any vim movement key, like j\n\nj moves down one “thing”\nusually line, now a window\n\nWe will use ESC + :w to write the file\nThen return to terminal CTRL+w+k\n\n\n\n\nThat was a lot\n\nShould look like this\n\n# gcc samp.c\ncc1: fatal error: samp.c: No such file or directory\ncompilation terminated.\n# gcc samp.c                        \n#                                   \n                                    \n!sh [running]                        0,0-1          All\nint main(int argc, char **argv) {\n        if (argc) {                                    \n                printf(\"%s\\n\", argv[1]);                       \n        }                                                      \n        return 0;                                      \n}                                                      \nsamp.c [+]                           8,1            Bot\n:term                                                  \n\n\nBreathe\n\nYou are now all-powerful\n\nYou are not beholden to any operating system\nCan work on cloud or anywhere with podman\nIf MS charges 10000 USD for VS Code tomorrow?\n\nYou are non-impacted\n\nEverytime you do this you get faster\n\n\n\n\nVerify Compilation\n\nUse ls to list files, look for a.out\n\n# gcc samp.c                        \n# ls\na.out  dev   lib    mnt   root    sbin  tmp\nbin    etc   lib64  opt   run     srv   usr\nboot   home  media  proc  samp.c  sys   var\n#   \n!sh [running]                        0,0-1          All\nint main(int argc, char **argv) {\n        if (argc) {                                    \n                printf(\"%s\\n\", argv[1]);                       \n        }                                                      \n        return 0;                                      \n}                                                      \nsamp.c [+]                           8,1            Bot\n:term                                                  \n\n\nRun Executable\n\nUse ./ prefix to use a.out as an executable\n\na.out  dev   lib    mnt   root    sbin  tmp\nbin    etc   lib64  opt   run     srv   usr\nboot   home  media  proc  samp.c  sys   var\n# ./a.out                                              \nSegmentation fault (core dumped)\n#       \n!sh [running]                        0,0-1          All\nint main(int argc, char **argv) {\n        if (argc) {                                    \n                printf(\"%s\\n\", argv[1]);                       \n        }                                                      \n        return 0;                                      \n}                                                      \nsamp.c [+]                           8,1            Bot\n:term                                                  \n\n\nSegfault\n\nIn “samp.c” to fix off-by-one error, test\n\nSegmentation fault (core dumped)\n# gcc samp.c\n# ./a.out\n# ./a.out hello\nhello\n#     \n!sh [running]                        0,0-1          All\nint main(int argc, char **argv) {\n        if (argc &gt; 1) {                                    \n                printf(\"%s\\n\", argv[1]);                       \n        }                                                      \n        return 0;                                      \n}                                                      \nsamp.c [+]                           8,1            Bot\n:term                                                  \n\n\nToday\n\n✓ Introduce the course\n\n✓ The C Programming Language\n✓ Cryptography + Cryptocurrency\n\nIntroduce the technologies\n\n✓ podman\n✓ vim\ngcc\ngit\n\n\n\n\nGCC\n\nDeveloped for the C language to make an open source operating system in 1987.\nMainly around today for the C language to make an open source operating system (Linux)\n(The C language was invented to write an operating system).\npython is written in GCC C\n\nC:\\Users\\cd-desk&gt;podman run -it python\nPython 3.13.1 (main, Dec  4 2024, 20:40:27) [GCC 12.2.0] on linux\n\n\nGreat freeware\n\nMany legendary programs created using GCC:\n\nHTTPD & NGINX, which serve a majority of webtraffic\nEvery major Linux and FreeBSD distribution\nMajor browsers like Firefox and Chromium\n\nFirefox is on clang now but that’s new\n\nGNU Bash and Coreutils, like cat, ls, rm\nBitcoin Core\n\n\n\n\nCompilation\n\nLike python or podman or vim, GCC is a command - gcc\ngcc takes at least one argument: a filename, usually of a C file\nGCC takes this C file and makes an executable\n\na program, sort of\n\nExecutables run as command with ./ prefix\n\nThis differs from python which runs a script without creating a corresponding program.\n\n\n\n\n.py vs .c\n\n\n\n\n\nflowchart LR\n  A(Python) --&gt; B[fname.py file]\n  B --&gt; C[python fname.py]\n  C --&gt; D{hello world}\n  E(C) --&gt; F[fname.c  file]\n  F --&gt; G[gcc fname.c -o ename]\n  G --&gt; H[./ename]\n  H --&gt; I{hello world}\n\n\n\n\n\n\n\nYou only have to compile once to have the executable forever.\nMost programs are executables, not scripts.\n\n\n\nOptions\n\ngcc has many options\n\n-o specifies the name of the output file\n-std specifies the C version (there’s a few)\n-Wall -Wextra -Werror -Wpedantic set warnings - I use all 4\n-w stop all warnings.\n-O2 to compile more slowly to make faster code\n\n\n\n\nC89/99\n\nI prefer to write C89/99 compliant code\n\nLater code is a bit too unclear for me\nC89/99 have everything I need in a systems language\nMost latter features I’d just switch to Python anyways\n\nIt tends to be easier to write compilers for C89 as well…\n\n\n\nPodracing\n\nQuickly pop back into our container.\n\npodman start -l ; podman exec -it -l vim samp.c\n\nPop open :term and run\n\ngcc samp.c -std=c89\n\nMy code runs fine. Let’s break it.\n\n\n\nC++ //\n\nMany C++ features have been adopted by C\nPerhaps the most famous is C++ comments.\n\n\n\nsamp.c\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        /* This is a C89 style comment */\n        // This is a C++ style comment\n        printf(\"hi\\n\");\n        return 0;\n}\n\n\n\nstd=c89\n\nMy vim window was tiny and I didn’t want to resize it\nI opened a new terminal and tested\n\ngcc samp.c --std=c89\nuser@DESKTOP-THMS2PJ:~/crypto/c89_99$ podman exec -it -l gcc samp.c --std=c89\nsamp.c: In function 'main':\nsamp.c:5:9: error: C++ style comments are not allowed in ISO C90\n    5 |         // This is a C++ style comment\n      |         ^\nsamp.c:5:9: note: (this will be reported only once per input file)\nuser@DESKTOP-THMS2PJ:~/crypto/c89_99$ podman exec -it -l gcc samp.c\n\n\n-Wall etc\n\nThe other flags help “keep you honest”\n\nIf we wanted shortcuts, we’d use Python\nWe want to be percise\n\nTry it:\n\ngcc samp.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2\n\n\nWhoops\n\nYou don’t want to find these problems latter.\n\nsamp.c: In function 'main':\nsamp.c:5:9: error: C++ style comments are not allowed in ISO C90\n    5 |         // This is a C++ style comment\n      |         ^\nsamp.c:5:9: note: (this will be reported only once per input file)\nsamp.c:3:14: error: unused parameter 'argc' [-Werror=unused-parameter]\n    3 | int main(int argc, char **argv) {\n      |          ~~~~^~~~\nsamp.c:3:27: error: unused parameter 'argv' [-Werror=unused-parameter]\n    3 | int main(int argc, char **argv) {\n      |                    ~~~~~~~^~~~\ncc1: all warnings being treated as errors\n\nPython needs -Wall for intro programming classes!\n\n\n\nPractice to Perform\n\nMy take: learn C89 in class\n\nCultivate a disciplined coding practice\nWork on older devices\nUnderstand old code\nUnderstand how computers work\n\nLearn modern C via Stack Overflow\n\nUnderstand how to code in practice\n\n\n\n\nToday\n\nReintroduce the technologies\n\n✓ podman\n✓ vim\n✓ gcc\ngit\n\n\n\n\nGit\n\n\nGit was invented… to store the C language source code for an open source operating system (Linux)\n\n\nIt is de facto the only way in the universe to store code other than “on my HDD/SSD”\n\n\nIt is also a very good way to\n\n\n\nStore Containerfiles\n\n\nSteadily build a codebase\n\n\n\n\n\n\nAs a command\n\nGit corresponds, like the others, to a command: git\n\nIt is common now to use other techniques, but the command remains extremely stable\n\nQuoth GitHub, the first and greatest of the collaboration tools:\n\n\n\nIf you want a lot of control and flexibility, you can use the command line.\n\n\n\n\nHenceforth\n\nThis week: Macros homework\nThis code will be used in the final project\nJust like all the rest of the code we write this term\nStore it on one big ole GitHub repo\n\n\n\nFun fact\n\nDespite Big Command Line lobbying to get us to use git\nThere is no graceful way to set repositories to private at commandline\n\nThere’s a tactic doing API calls through the GitHub CLI\nWhat are we even doing, open a browser\n\nIn 2024, browsers are decisively more secure than the commandline\n\n\n\nPrivate\n\nI recommend:\n\nPop in browser\nMake a private github repo, like “crypto”\n\nAdd me as a collaborator\n\nName it “crypto”\nProbably use a folder per week for hws\n\nMaybe also labs, or just keep those local\n\n\n\n\n\nGitHub x Podman\n\nOver time, we’ll try to operationalize code better and better\nEventually, I plan to ask for a container in “ghcr”\n\nGitHub Container Registry\n\nIn the meantime, I’d just keep a Containerfile at top level in your “crypto” repo.\n\n\n\nToday\n\nReintroduce the technologies\n\n✓ podman\n✓ vim\n✓ gcc\n✓ git\n\n\n\n\nStinger\nroot@262ad65a08ba:/# vim build.sh\nroot@262ad65a08ba:/# ./build.sh\nbash: ./build.sh: Permission denied\nroot@262ad65a08ba:/# chmod 777 build.sh\nroot@262ad65a08ba:/# ./build.sh\nsamp.c: In function 'main':\nsamp.c:5:9: error: C++ style comments are not allowed in ISO C90\n    5 |         // This is a C++ style comment\n      |         ^\nsamp.c:5:9: note: (this will be reported only once per input file)\nsamp.c:3:14: error: unused parameter 'argc' [-Werror=unused-parameter]\n    3 | int main(int argc, char **argv) {\n      |          ~~~~^~~~\nsamp.c:3:27: error: unused parameter 'argv' [-Werror=unused-parameter]\n    3 | int main(int argc, char **argv) {\n      |                    ~~~~~~~^~~~\ncc1: all warnings being treated as errors\nroot@262ad65a08ba:/# cat build.sh\n#!/bin/sh\ngcc samp.c --std=c89 -Wall -Wextra -Werror -Wpedantic -O2 -o samp\nroot@262ad65a08ba:/#"
  },
  {
    "objectID": "alpine.html",
    "href": "alpine.html",
    "title": "Alpine",
    "section": "",
    "text": "Review:\nNewish:\n\n\n\n\n- podman\n- Alpine\n\n\n- vim\n- Images\n\n\n- gcc\n- Copies\n\n\n- git\n\n\n\n\n\n\n\n\nYou should have Podman installed.\nIf you are on Windows, you should have WSL installed.\n\nI use it with Ubuntu but do what you like.\n\n\n\nTODO (windows only)\nwsl --install -d ubuntu"
  },
  {
    "objectID": "alpine.html#run",
    "href": "alpine.html#run",
    "title": "Alpine",
    "section": "Run",
    "text": "Run\n\nFirst thing we’ll do in Podman is podman run\n\n\nTODO\npodman run\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run\nError: requires at least 1 arg(s), only received 0"
  },
  {
    "objectID": "alpine.html#images",
    "href": "alpine.html#images",
    "title": "Alpine",
    "section": "Images",
    "text": "Images\n\nThe thing we run is called an image\nWe’ll use a sample image named Python\n\nYou’ll never guess what it does (Python)\n\nStudents may wish to specify “python:alpine”\n\nThat is the python command in the alpine operating system.\nThis is a 20x smaller image, so 20x faster download\nIt is on a less common Linux OS (alpine) that may be harder to use.\n\n\n\nTODO\npodman run python:alpine\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run python:alpine\nResolved \"python\" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf)\nTrying to pull docker.io/library/python:latest...\nGetting image source signatures\nCopying blob sha256:abab87fa45d0b95db90eb47059d7e87f5a69281fe5d76fcdb7889ec5c310f44c\n...\nWriting manifest to image destination\n\nC:\\Users\\cd-desk&gt;"
  },
  {
    "objectID": "alpine.html#just-do--it",
    "href": "alpine.html#just-do--it",
    "title": "Alpine",
    "section": "Just do -it",
    "text": "Just do -it\n\nWe downloaded an image and ran it as a container but…\n\nWe didn’t ask the container to do anything\nSo it exits instantly\nOf note, we only have to download once (image) to run many times (container)\n\nTo work within the container run -it for “interactive terminal”\n\n\nTODO\npodman run -it python:alpine\n\nIt should look something like this:\nC:\\Users\\cd-desk&gt;podman run -it python\nPython 3.13.1 (main, Dec  4 2024, 20:40:27) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt;"
  },
  {
    "objectID": "alpine.html#containerfiles",
    "href": "alpine.html#containerfiles",
    "title": "Alpine",
    "section": "Containerfiles",
    "text": "Containerfiles\nThis section concerns something called variously “Containerfiles” or “Dockerfiles” - commonly referred to as “Dockerfiles”, though I believe this is changing over time. If you get stuck, it may be easier to look up “Dockerfiles” documentation - I’ve been looking at both.\n\nUsually when I’m using a container, I need something for which I can’t simply find a default image.\nIn my case, I specifically want a container with something called a “Containerfile”.\nHere is a minimal example:\n\n\n\nContainerfile\n\nFROM alpine\n\n\nI use Alpine as my base image\nIt’s a lightweight Linux operating system\nIt (tends to) have everything I need.\n\n\nTODO\necho \"FROM alpine\" &gt; Containerfile\n\n\nI would save “Containerfile” wherever I save classwork.\n\nFor me, a class-specific directory inside my home directory in the Linux filesystem\n\nincluding on Windows - I work within the WSL filesystem.\n\n\n\nUltimately for me, it looks something like this:\nuser@DESKTOP-THMS2PJ:~$ mkdir crypto\nuser@DESKTOP-THMS2PJ:~$ cd crypto/\nuser@DESKTOP-THMS2PJ:~/crypto$ echo \"FROM alpine\" &gt; Containerfile\nuser@DESKTOP-THMS2PJ:~/crypto$ pwd\n/home/user/crypto\nuser@DESKTOP-THMS2PJ:~/crypto$ ls\nContainerfile"
  },
  {
    "objectID": "alpine.html#build",
    "href": "alpine.html#build",
    "title": "Alpine",
    "section": "Build",
    "text": "Build\n\nWith a “Containerfile” written, we can use podman build.\n\n\nTODO\npodman build\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build\nError: no context directory and no Containerfile specified"
  },
  {
    "objectID": "alpine.html#pale-blue-.",
    "href": "alpine.html#pale-blue-.",
    "title": "Alpine",
    "section": "Pale blue .",
    "text": "Pale blue .\n\nAs with podman run, with podman build we must specify what image to use\n\nBut now we can use an image described by a “Containerfile”!\n\nTo specify, we simply give the current directory ..\n\n\nTODO\npodman build .\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build .\nSTEP 1/1: FROM alpine\nResolved \"alpine\" as an alias (/etc/containers/registries.conf.d/shortnames.conf)\nTrying to pull docker.io/library/alpine:latest...\nGetting image source signatures\nCopying blob 38a8310d387e done\nCopying config 4048db5d36 done\nWriting manifest to image destination\nStoring signatures\nCOMMIT\n--&gt; 4048db5d367\n4048db5d36726e313ab8f7ffccf2362a34cba69e4cdd49119713483a68641fce"
  },
  {
    "objectID": "alpine.html#we-love-the--t",
    "href": "alpine.html#we-love-the--t",
    "title": "Alpine",
    "section": "We love the -t",
    "text": "We love the -t\n\nThis creates a new image but we don’t know what to call it\n\nThe default name is that numerical value in the 2nd to last time above\n\nUse the -t option to podman build, to name the image.\n\nAs far as I can tell, it stands for “tag”\n\nWe can then use this image by name with other commands.\n\n\nTODO\npodman build -t crypto .\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman build -t crypto .\nSTEP 1/1: FROM alpine\nCOMMIT crypto\n--&gt; 4048db5d367\nSuccessfully tagged localhost/crypto:latest\nSuccessfully tagged docker.io/library/alpine:latest\n4048db5d36726e313ab8f7ffccf2362a34cba69e4cdd49119713483a68641fce"
  },
  {
    "objectID": "alpine.html#run-1",
    "href": "alpine.html#run-1",
    "title": "Alpine",
    "section": "Run",
    "text": "Run\n\nThe “crypto” image is now being maintained on your device by Podman.\nWe can use run as we did with any other image.\n\n\nTODO\npodman run -it crypto\n\nIt should look something like this:\nuser@DESKTOP-THMS2PJ:~/crypto$ podman run -it crypto\n/ #"
  },
  {
    "objectID": "alpine.html#vim",
    "href": "alpine.html#vim",
    "title": "Alpine",
    "section": "vim",
    "text": "vim\n\nFirst, we can see if we have, say vim. We do not:\n\n\nTODO\nvim\n\nIt should look something like this:\n/ # vim\n/bin/sh: vim: not found"
  },
  {
    "objectID": "alpine.html#apk",
    "href": "alpine.html#apk",
    "title": "Alpine",
    "section": "apk",
    "text": "apk\n\nTo add software to Alpine linux, we use apk - the Alpine Package Keeper.\n\n\nTODO\napk\n\nIt should look something like this:\n/ # apk\napk-tools 2.14.6, compiled for x86_64.\n\nusage: apk [&lt;OPTIONS&gt;...] COMMAND [&lt;ARGUMENTS&gt;...]\n\nPackage installation and removal:\n  add        Add or modify constraints in WORLD and commit changes"
  },
  {
    "objectID": "alpine.html#add",
    "href": "alpine.html#add",
    "title": "Alpine",
    "section": "add",
    "text": "add\n\nGenerally speaking, we can use add with the name of a command, and apk will find and install that command for us:\n\nvim\ngcc\npython\n\nprobably have to say python2 or python3\n\npodman\n\ncan probably run within a container, I didn’t check.\n\n\n\n\nTODO\napk add vim\n\nIt should look something like this:\n/ # apk add vim\n(1/5) Installing vim-common (9.1.0707-r0)\n(2/5) Installing xxd (9.1.0707-r0)\n(3/5) Installing ncurses-terminfo-base (6.5_p20241006-r3)\n(4/5) Installing libncursesw (6.5_p20241006-r3)\n(5/5) Installing vim (9.1.0707-r0)\nExecuting busybox-1.37.0-r8.trigger\nOK: 35 MiB in 20 packages\n\nTo install vim, apk had to install a few other things first…\n\nIncluding the legendary C library ncurses!\nUsed to make legendary game “Rogue”\nFun!\n\nBut ultimately, apk got vim working"
  },
  {
    "objectID": "alpine.html#vim-1",
    "href": "alpine.html#vim-1",
    "title": "Alpine",
    "section": "vim",
    "text": "vim\n\nTest it:\n\n\nTODO\nvim\n\nIt should look something like this:\n~               VIM - Vi IMproved\n~                  version 9.1\n~            by Bram Moolenaar et al.\n~   Vim is open source and freely distributable\n~\n~          Become a registered Vim user!\n~  type  :help register&lt;Enter&gt;   for information\n~\n~  type  :q&lt;Enter&gt;              to exit\n~  type  :help&lt;Enter&gt;  or  &lt;F1&gt; for on-line help\n~  type  :help version9&lt;Enter&gt;  for version info"
  },
  {
    "objectID": "alpine.html#quick-q",
    "href": "alpine.html#quick-q",
    "title": "Alpine",
    "section": "Quick :q",
    "text": "Quick :q\n\nThat is vim running in podman in a “crypto” folder in my home folder.\nLet’s get back to home, following back up:\n\n~ (Linux home)\n\n~/crypto (folder name)\n\npodman run -it crypto (crypto image run by podman executable)\n\nvim (vim executable run by crypto image)\n\n\n\n\nWe first leave vim\n\n\nTODO\n:q\n\nIt should look something like this, with whatever previous commands you used before vim present:\n/ # vim\n/bin/sh: vim: not found\n/ # apk add vim\n(1/5) Installing vim-common (9.1.0707-r0)\n(2/5) Installing xxd (9.1.0707-r0)\n(3/5) Installing ncurses-terminfo-base (6.5_p20241006-r3)\n(4/5) Installing libncursesw (6.5_p20241006-r3)\n(5/5) Installing vim (9.1.0707-r0)\nExecuting busybox-1.37.0-r8.trigger\nOK: 35 MiB in 20 packages\n/ # vim\n/ #"
  },
  {
    "objectID": "alpine.html#exit",
    "href": "alpine.html#exit",
    "title": "Alpine",
    "section": "Exit",
    "text": "Exit\n\nThat is vim running in podman in a “crypto” folder in my home folder.\nLet’s get back to home, following back up:\n\n~ (Linux home)\n\n~/crypto (folder name)\n\npodman run -it crypto (crypto image run by podman executable)\n\n\n\nWe then exit the container\n\n\nTODO\nexit\n\nIt should look something like this, with whatever previous commands you used before vim present:\n/ # vim\n/ # exit\nuser@DESKTOP-THMS2PJ:~/crypto$"
  },
  {
    "objectID": "alpine.html#exit-1",
    "href": "alpine.html#exit-1",
    "title": "Alpine",
    "section": "Exit",
    "text": "Exit\n\nWe entered a container via run and installed vim.\nIn theory this means we can\n\nrun, again, then\nuse vim without installing with apk\n\nTest it\n\n\nTODO\npodman run -it crypto\nvim\n\nIt should look like this::\nuser@DESKTOP-THMS2PJ:~/crypto$ podman run -it crypto\n/ # vim\n/bin/sh: vim: not found\n\nWe installed vim to a container.\nWe ran an image\nAn image is an instance of the container\n\nNothing done in a container persists post-exit\nIf we want to use vim immediately, we need to add it to the image\n\nWe’ll exit the container then solve this problem.\n\n\nTODO\nexit"
  },
  {
    "objectID": "alpine.html#note",
    "href": "alpine.html#note",
    "title": "Alpine",
    "section": "Note",
    "text": "Note\n\nThis section will be much less explicit and apply what you learned.\n\nIf you get stuck, check prior sections.\n\nIf you get stuck, move onto the next section “Git it” to save you work and finish up latter.\n\nIt contains the answer key"
  },
  {
    "objectID": "alpine.html#goal",
    "href": "alpine.html#goal",
    "title": "Alpine",
    "section": "Goal",
    "text": "Goal\n\nWe will:\n\nSet up the “crypto” image for C development\n\nWrite C code\nCompile C code\nRun C code\nCopy the C code back the host system"
  },
  {
    "objectID": "enigma.html",
    "href": "enigma.html",
    "title": "Enigma",
    "section": "",
    "text": "Enigma Show\n\n\nGoal: Learn C I/O and strings\n\nMy responsibility\n\nI will provide a reference solution in Python\nI will provide an autograder Containerfile\n\nYour responsibility\n\nYou will create a solution in C as an “enigma.c” file\nYou will create a Gist with an “enigma.c”\nYou will email me, from your credentialed school email, the url of your Gist, it will look something like:\n\nhttps://gist.github.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40\nWhat follows is reference material to prepare you to implement “enigma.c”\n\nEnigma, Solved, Visual, and Rotors form a description of the requirements\nPodman, and Char * cover the technical details that support the implementation.\n\n\n\n\nTopic Areas\n\n\n\nReview:\nNewish:\n\n\n\n\n- podman\n- curl\n\n\n- vim\n- stdio\n\n\n- gcc\n- ciphers\n\n\n- git\n\n\n\n\n\n\nMotivation\n\nEnigma was a historically significant technology\n\nIt was a Nazi encryption device, using ciphers\nIt was broken by Turing, gay icon and one of the first and greatest computer scientists\n\nAt Willamette, Enigma is an (in)famous CS 151 Intro to Programming assignment\n\nBasically it is the first assignment that requires nested for loops\n\nIn this course, Enigma will demonstrate the obscurity/clarity divide\n\nIn Python, letters and numbers are different things\nIn C, there are no letters or really numbers, just bits and bytes\nThis makes Enigma in C easier, despite being a “harder” language.\n\n\n\n\nReference Materials\n\nYou can review the Python assignment if you wish:\n\nWrite-ups:\n\nProf. Roberts\nProf. Rembold\nProf. Calvin\n\nSlides\n\nProf. Rembold\nProf. Calvin\n\nAssignment Repository\n\nI also provide\n\n“Solved”: A Python implementation of the machine\n“Visual”: A text visualizer of the Engima machine’s ciphers\n“Rotors”: A text visualizer of the full Enigma machine\n\n\n\n\n\n\nSolved Show\n\n\nHere is a reference solution, with a few tests, in Python.\n\nGist\n\nI regard this code as considerably easier to read, test, and understand than most plaintext descriptions.\nI will also do a visual representation.\nThe ciphers are sometimes called “rotors” because historically they were implemented as a rotating… cipher.\n\n#!/usr/bin/env python3\n\n# constants                       # constant\nrs = [                            # rotors\n    \"BDFHJLCPRTXVZNYEIWGAKMUSQO\", # fast\n    \"AJDKSIRUXBLHWTMCQGZNPYFVOE\", # medium\n    \"EKMFLGDQVZNTOWYHXUSPAIBRCJ\", # slow\n    \"IXUHFEZDAOMTKQJWNSRLCYPBVG\"  # reflect\n]\nA  = ord('A')                     # value of 'A'\nNC = len(rs[0])                   # number of characters\n\n# apply a cipher/rotor `r` to a letter `c`\nrapply = lambda c, r : r[ord(c) - A]\n\n# invert a cipher/rotor `r`\n    # create a list of letters with their index\n        # [(r[i],i) for i in range(NC)]\n    # sort the list\n        # for p in sorted\n    # convert indexes to back to letters in the alphabet\n        # chr(p[1]+A)\ninvert = lambda r : [chr(p[1]+A) for p in sorted([(r[i],i) for i in range(NC)])]\n\n# extend the rotor set to include inverted ciphers\n    # In reversed order, as well\n    # fas med slo ref slo med fas\nrs += [invert(r) for r in rs[2::-1]]\n\n# encrypt letter `c` with rotors in default* positions\nrotors = lambda c : [c := rapply(c,r) for r in rs][-1]\n\n# default position a,b,c -&gt; r,f,o, respectively\nassert([\n    rotors('A'),\n    rotors('B'),\n    rotors('C')\n] == ['R','F','O'])\n\n# shift letter `c` forward `n` letters in alphabet\nnshift = lambda c, n : chr((ord(c) - A + n) % NC + A)\n\n# allow rotor rotations\n    # fast spins every letter\n    # medi spins every time fast loops back NC-&gt;0\n    # slow \"\"               medi \"\"\nshifts = lambda l, n : [\n    l % NC, l // NC % NC, l // (NC*NC) % NC,\n    0,\n    l // (NC*NC) % NC, l // NC % NC, l % NC\n][n]\n\n# combine shift apply? don't know what to call\nshiply = lambda c, n, r : nshift(rapply(nshift(c,n),r),-n)\n# or if you prefer\nshiply = lambda c, n, r : chr((ord(r[(ord(c)-A+n)%NC])-A-n)%NC+A)\n\n# single letter enigma, with number of previous letters `l`\nletter = lambda c, l : [c := shiply(c,shifts(l,i),rs[i]) for i in range(len(rs))][-1]\n\n# phrase\n    # enigma starts with an single rotation before first encryption.\nenigma = lambda s : \"\".join([letter(s[i],i+1) for i in range(len(s))])\n\n# test\nassert([\n    enigma(\"AAA\"),\n    enigma(\"ABC\"),\n    enigma(\"ZLC\")\n] == [\"ZLC\",\"ZRA\",\"AAA\"])\n\nif __name__ == \"__main__\":\n    import sys\n    print(enigma(sys.argv[1]))\n\nHere is an example of how it is used to print “HELLOWORLD”:\n\npython3 enigma.py MNBOASVTTB\n\n\n\nVisual Show\n\n\nSingle Cipher\n\nVisualize a cipher as mapping a A-Z to A-Z.\n\nSay, ‘E’ becomes ‘J’\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J\n\n\nIterative Cipher\n\nWe can apply ciphers iteratively.\n\nSo the output ‘J’ of the first cipher is input to the next cipher.\n\n\n ____________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher[0]\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # cipher[1]\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n           B\n\n\nAll Ciphers\n\nEnigma ciphers/rotors are named:\n\nFast\nMedium\nSlow\nReflect, which has special properties\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M\n\nReflector\n\nWe note that with the reflector:\n\nIf we take the alphabet and find a corresponding letter in the cipher, or\nIf we take the cipher and find a corresponding letter in the alphabet\nWe get the same letter…\n\nThis is…\n\nThe special property of the reflector, and\nHow we will re-use the fast, medium, and slow ciphers.\n\n\n\n\n            K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M\n\n              K\n _____________|______________\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n[             |              ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n              M\n\n\n\n\n\nDecryption\n\nAfter the reflect cipher, values are decrypted\n\nA letter’s place in the cipher, not alphabet, is found\nThis location is used to determined the letter in the alphabet\nEssentially, a change from mapping the alphabet to a cipher, to vice versa.\n\n‘H’ comes out of the reflector\n\n‘H’ is is index 7 letter of the alphabet\nSo in the next cipher, we’ll look up the index 7 letter of the cipher\nIt is now more helpful to think of an index than a letter - that is what changes here.\n\n\n            K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M&lt;&lt;&lt;&lt;&lt;&lt;&lt;M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M\n\n\nInversion\n\nWe can separately calculate what cipher would correspond to the “inverted” slow cipher.\n\nWe take all the slow-&gt;alphabet pairs\nWe alphabetize the pairs by the first letter\nThe output is no longer alphabetized, as is a new cipher.\n\nIt is left to the student as a design decision whether do\n\n“Decrypt” via a provided cipher, or\n“Invert” a provided cipher, and apply the inverted cipher.\n\nStudents should consider the complexity of both methods.\n\n\n\n    M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M\n\n              M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n              C\n\n\n\n\nIterating Back\n\nThe next cipher is “medium” and its index 7 letter is ‘U’\n\n‘U’ is the index 20 letter of the alphabet.\n\n\n\n\n    M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;C\n ________________|____________\n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n[                |           ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 P\n\n              M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;C\n ___|________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[   |                        ]  \n[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    P            \n\n\n\n\nEnd-to-end\n\nThe entire end-to-end cipher application can be visualized as follows…\n\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    M&lt;&lt;&lt;&lt;&lt;&lt;&lt;M\n ___|________________________\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n[   |                        ]\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;C\n ________________|____________\n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n[                |           ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n         P&lt;&lt;&lt;&lt;&lt;&lt;&lt;P\n ________|___________________\n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n[        |                   ]  \n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         H\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J&gt;&gt;&gt;&gt;J               \n __________|_________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[          |                 ]  \n[ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium\n ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   B&lt;&lt;&lt;&lt;&lt;&lt;&lt;B\n __|_________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[  |                         ]\n[ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow\n ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n   K&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;K\n ___________|________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[           |                ]\n[ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n ‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n            M&gt;M\n _____________|______________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[             |              ]\n[ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    C&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;C\n ___|________________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[   |                        ]  \n[ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1\n ‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n    P&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;P    \n ________________|___________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[                |           ]  \n[ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 H\n\n\nFor the remainder of the write-up, I will assume without loss of generality the usage of inverted ciphers.\n\n\n\n\nRotors Show\n\n\nSingle Rotor\n\nVisualize a rotor as mapping a A-Z to A-Z.\n\nSay, ‘E’ becomes ‘J’\n\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      J\n\n\nRotation\n\nWe call these things rotors because they rotate:\n\nThe mapping from e.g. index i of the input to index j of the output is unalterated\n\nFor example, ‘E’ is index 5 and maps to ‘J’` at index 10, both of the alphabet\n\nHowever, we can change the rotors as follows:\n\nThe input index is shifted forward by some shift value n\nThis input index is mapped to an output index\nThis output index is shifted backward by the same n\n\n\nLet’s visualize with n = 3\n\n      E\n      |&gt;&gt;&gt;\n      EFGH\n      &gt;&gt;&gt;|\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P\n      &lt;&lt;&lt;|\n      MNOP \n      |&lt;&lt;&lt;\n      M\n\n\nAs ciphers\n\nIt is worth noting this identical to generating ciphers that start an the index n letter of the alphabet and wrap around from Z to A.\n\n\n\n      E\n      |\n      |&gt;&gt;&gt;\n      EFGH\n      &gt;&gt;&gt;|\n         |\n         |\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P\n         |\n      &lt;&lt;&lt;|\n      MNOP \n      |&lt;&lt;&lt;\n      |\n      M\n\n      E\n _____|______________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[     |                      ]  \n[ DEFGHIJKLMNOPQRSTUVWXYZABC ] # forward(3)\n ‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n      H&gt;&gt;H\n ________|___________________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[        |                   ]  \n[ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # cipher\n ‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n         P&gt;&gt;&gt;&gt;&gt;&gt;&gt;P\n ________________|___________\n[ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n[                |           ]  \n[ XYZABCDEFGHIJKLMNOPQRSTUVW ] # forward(-3)\n ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾\n                 M\n\n\nFor the remainder of the write-up, I will assume without loss of generality that rotations can be understood without considering them to be ciphers.\n\n\nFor Enigma\n\nThe Enigma machine triggers rotor rotations every time a letter is encrypted.\nThey rotate as follows\n\nBefore a letter is encryped, the fast rotor rotates forward once.\n\nSo before the first encryption,\n\n(n = 0 : A-&gt;A) becomes (n = 1 : A-&gt;B) before the fast rotor.\n\nTo understand this, the rotation must be applied at two points:\n\nBefore and after going through the fast rotor, and\nBefore and after reversing through the fast^-1 rotor.\n\n\nIf the fast rotor “loops back” from a rotation from (n = 25 : A-&gt;Z) to a non-rotation of (n = 26 = 0 : A-&gt;A).\n\nThe medium rotor advances once, from e.g. (n = 0 : A-&gt;A) to (n = 1 : A-&gt;B)\n\nWhen medium loops back, fast advances once.\nThere are no rotations related to the reflector.\n\nWe image we have typed 29 letters:\n\nthe fast rotor has progressed 29 times and progresses once more before encryption.\n\nSo shift by n = 30, or n = 30-26 = 4.\n\nthe medium rotor progresed 1 time,\nand slow rotor progressed not at all.\n\nSteps labelled “adjust” are not computational\n\nI change horizontal alignment of letters to align the rotors.\nThis is a visual change only, as it was in “Visual” above.\n\n\n     X\n     |\n=====|===========================================\n=    X                                          =\n=    |&gt;&gt;&gt;&gt;                                      =\n=    XYZAB                           # rotate   =\n=    &gt;&gt;&gt;&gt;|                                      =\n=        B                                      =\n=      __|_________________________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = \n=     [  |                         ]            = # fast\n=     [ BDFHJLCPRTXVZNYEIWGAKMUSQO ] # fast     =\n=      ‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=        D                                      =\n=    &lt;&lt;&lt;&lt;|                                      =\n=    ZABCD                           # rotate   =\n=    |&lt;&lt;&lt;&lt;                                      =\n=    Z                                          =\n=====|===========================================\n     |\n     Z&gt;Z                             # adjust\n       |\n=======|=========================================\n=      Z                                        =\n=      |&gt;                                       =\n=      ZA                            # rotate   =\n=      &gt;|                                       =\n=       A                                       =\n=      _|__________________________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [ |                          ]            = # medium\n=     [ AJDKSIRUXBLHWTMCQGZNPYFVOE ] # medium   =\n=      ‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=       A                                       =\n=      &lt;|                                       =\n=      ZA                            # rotate   =\n=      |&lt;                                       =\n=      Z                                        =\n=======|=========================================\n       |\n       Z&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Z   # adjust\n                                 |\n=================================|===============\n=                                Z              =\n=                                |              =\n=                                Z   # rotate   =\n=                                |              =\n=                                Z              =\n=      __________________________|_             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [                          | ]            = # slow\n=     [ EKMFLGDQVZNTOWYHXUSPAIBRCJ ] # slow     =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾             =\n=                                J              =\n=                                |              =\n=                                J   # rotate   =\n=                                |              =\n=                                J              =\n=================================|===============\n                                 |\n                 J&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;J   # adjust\n       __________|_________________\n      [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet\n      [          |                 ]              # reflect\n      [ IXUHFEZDAOMTKQJWNSRLCYPBVG ] # reflect\n       ‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n                 O&gt;&gt;&gt;&gt;O              # adjust\n                      |\n======================|==========================\n=                     O                         =\n=                     |                         =\n=                     O              # rotate   =\n=                     |                         =\n=                     O                         =\n=      _______________|____________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [               |            ]            = # slow\n=     [ UWYGADFPVZBECKMTHXSLRINQOJ ] # slow^-1  =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾             =\n=                     M                         =\n=                     |                         =\n=                     M              # rotate   =\n=                     |                         =\n=                     M                         =\n======================|==========================\n                      |\n                    M&lt;M              # adjust\n                    |\n====================|=============================\n=                   M                           =\n=                   |&gt;                          =\n=                   MN               # rotate   =\n=                   &gt;|                          =\n=                    N                          =\n=      ______________|_____________             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet =\n=     [ |            |             ]            = # medium\n=     [ AJPCZWRLFBDKOTYUQGENHXMIVS ] # medium^-1=\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾             =\n=                    T                          =\n=                   &lt;|                          =\n=                   ST               # rotate   =\n=                   |&lt;                          =\n=                   S                           =\n====================|============================\n                    |\n                    S&gt;&gt;&gt;&gt;&gt;S\n                          |\n==========================|======================\n=                         |                     =\n=                         S                     =\n=                         |&gt;&gt;&gt;&gt;      # rotate   =\n=                         STUVW                 =\n=                         &gt;&gt;&gt;&gt;|                 =\n=      _______________________|____             =\n=     [ ABCDEFGHIJKLMNOPQRSTUVWXYZ ] # alphabet = \n=     [                       |    ]            = # fast\n=     [ TAGBPCSDQEUFVNZHYIXJWLRKOM ] # fast^-1  =\n=      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾             =\n=                             R                 =\n=                         &lt;&lt;&lt;&lt;|                 =\n=                         NOPQR       # rotate  =\n=                         |&lt;&lt;&lt;&lt;                 =\n=                         N                     =\n==========================|======================\n                          |\n                          N\n\n\n\n\nPodman Show\n\n\nPodman\n\nI am providing the following Containerfile, which will serve as a minimal autograder\n\nIt sets up an Alpine container.\nIt downloads a Python script to test.\nIt copies in “enigma.c” from your system.\n\n\n\n\nContainerfile\n\nFROM alpine\n\nRUN apk add gcc libc-dev python3 curl\n\nRUN curl https://gist.githubusercontent.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40/raw/2d5db57c8e3704df239b21288f30a394a53ca4f8/tester.py -o tester.py\n\nCOPY enigma.c .\n\n\n\nUsage\n\nI built my container via:\n\npodman build -t tester .\n\nI tested my code via:\n\npodman run tester python3 tester.py\n\nIf the above script returns “Perfect!” you are done.\n\nCreate a Gist with an “enigma.c”.\nEmail me the url of your Gist, it will look something like, from your official school email:\n\n\nhttps://gist.github.com/cd-public/a840e95e71ac7309a53ab0bb1282ba40\n\nI will review the most recent version prior to the due date.\n\n\n\nVim trick:\n\nYou will probably want to work in a container with vim and also test your code in the same container.\n\nIt is possible to create a second command line tab that is also within the container.\n\nConsult podman documentation - many ways to do this.\n\nI recommend using vim built-in :term command, which splits the screen into a vim editor and a vim terminal.\nYou can move between windows using ctrl+w - if it doesn’t work, Google it.\n\n\n\n\nPodman trick:\n\nYou will probably want to create one container then work in that container until you finish.\npodman run will create a new container each time, which is not what you probably want.\nThe following recycles the previous container, mostly.\n\nRead more: Stack Overflow\n\n\npodman start -a -i `podman ps -q -l`\n\n\n\n\nchar * Show\n\n\nHello, world!\n\nI start “enigma.c” with “hello.c” from Alpine\n\nThis file will successfully create an executable, not correctly encrypt or decrypt.\nTry it out with the autograder container.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    printf(\"hello, world\\n\");\n    return 0 ;\n}\n\n\n\nNo strings attached\n\nIn C there are no strings.\n\nThere are instead things called char *\nSay “character star”\nWe attach the * to the variable name\n\nWe’ll revisit this latter - it will make sense.\n\nThat is, an array, or buffer, of characters\n\nNot quite a list - closer to a NumPy array.\n\n\nIt matters what things are called.\n\nIn C we must say what kind of thing a variable is when we “declare” the variable.\nLatter we use the variable, without specifying the kind of thing\nBut we cannot change its kind.\nC variable declaration is like Python function declaration, with def\n\nWe will use format print and variable declarations to introduce “char *”\n\nWe note that Python print appends a newline and C printf does not.\n\nI specify an non-newline terminator in Python for equivalence.\n\n\n\n\n\n\n\ntest.py\n\nx = 1\nprint(f\"{x:d}\", end=\"\")\n# we can reassign x and change its type\nx = \"hello world\"\nprint(f\"{x:s}\", end=\"\")\n\n\n\n\ntest.c\n\nint n = 1;\nprintf(\"%d\", n) ;\n/* we have to make a new variable of novel type */\nchar *m = \"hello world\";\nprintf(\"%s\", m) ;\n\n\n\n\nBoth have the same output:\n\nThe numerical value “1” and the string value “hello world” on the same line.\n\n\n1hello world\n\nYou can update “hello.c” to use a format print.\n\nThis will form the basis of output in this assignment.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n    char *str = \"hello, world\";\n    printf(\"%s\\n\", str);\n    return 0 ;\n}\n\n\n\nConstants\n\nThe C language has a formal support for constants\n\nThese are values that a fixed when the executable is created.\nThey may not be reassigned by any line of code.\n\nThe #define “pre-processor directive” is used to create constants.\n\n#define is like #include which is somewhat like import\nIt defines new values, which are not variables, for use in the .c file\nThe pre-processor reads .c files before the executable is created.\n\nWe can also use #define for strings, such as the rotor strings.\n\nBy convention, constants, are named in all caps, like ROTORS\nI used a single string of all rotors concatenated.\nYou may do whatever works for you.\n\n\n\n\nenigma.c\n\n#include &lt;stdio.h&gt;\n\n#define STR \"hello, world\"\n\nint main() {\n    printf(\"%s\\n\", STR);\n    return 0 ;\n}\n\n\nAn astute learner will note that constants need not be computed within an executable.\nIt is not uncommon to compute constants in a different file, or even in a different language.\n\nMy ROTORS constant was computed in Python.\nI used Python file operations to save this computation to “enigma.c”\nVia vim I used the “yank” and “paste” features to move it to the top of “enigma.c”.\n\n\n\n\nJust a little bit\n\nIn C, characters aren’t printing characters.\n\nThey are “just bits” - a collection of ones and zeroes, or a number.\nWe attach the * to the variable name\n\nWe’ll revisit this latter - it will make sense.\n\nThis differs from Python, which uses strings of length one.\n\nThis is sketchy, sometimes.\nStrings are a non-numeric.\n\n\nIf we want to use a numerical value as a printing character, we use a format print.\nC characters use single quotes, and C strings use double quotes.\n\n\n\n\n\ntest.py\n\nx = ord('A')\nprint(f\"{x:d}, {x:x}, {x:c}\")\n\n\n\n\ntest.c\n\n/* We do not use anything like ord() */\nprintf(\"%d, %x, %c\\n\", 'A','A','A');\n\n\n\n\nBoth have the same output:\n\nThe decimal (base 10), hexadecimal (base 16), and unicode/ascii representations of the same value.\n\n\n65, 41, A\n\nAn astute learner will note that this insight is sufficient to implement a rotor.\n\n\n\n\n\nC loop Show\n\n\nBuilding Character\n\nThe core complication of the Enigma machine was that it was an iterative cipher.\nLet’s practice iteration by iterating over a char *\nWe note:\n\nIn C there is no string, list, tuple, generator, dictionary, or set type.\nIn Python, for loops require one of these types.\nHenceforth we refer to the C for loop as a “for loop” and Python for loop as a “for each loop”.\n\nA for loop is composed of three components:\n\nInitiate\nTerminate\nIterate\n\nSyntactically, they are structured follows:\n\nfor ( 𝘪𝘯𝘪𝘵𝘪𝘢𝘵𝘦; 𝘵𝘦𝘳𝘮𝘪𝘯𝘢𝘵𝘦; 𝘪𝘵𝘦𝘳𝘢𝘵𝘦) { \n    𝘤𝘰𝘥𝘦 𝘣𝘭𝘰𝘤𝘬\n}\n\nPrint 0 through 9\n\nint i ;\nfor ( i = 0; i &lt; 10; i++) { \n    printf(\"%d\\n\", i);\n}\n\nWe now explore each component.\nAn astute learner will note that this insight is sufficient to implement the entire enigma machine.\n\nRemaining headings provide guidance on common pitfalls.\nIf you can do enigma now, skip to “C args”\n\n\n\nIterate\n\nThe last of the three for loop components, the iterator, is closest to the Python for each loop.\nThe iterator statement is run each time the loop completes, after the internal code block is run.\nAny statement may be placed in this position.\nThe most common is i++, a special shorthand for incrementation.\n\nIt is logically equivalent to Python i += 1.\n\nFind the length of the first word in a string with an iterator only:\n\nIncrease a string index by one within the iterator.\nInclude an if statement in the for loop code block.\nUse a return statement in the if statement code block.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; ; i++) {\n        if (str[i] == ' ') {\n                printf(\"%d\\n\", i);\n                return 0;\n        }\n}\n\n\nTerminate\n\nUnlike Python strings, C character arrays have no length.\nRather, they end with a special character.\n\nThis character is called the null terminator\nIt is non-printing (not visible).\nIt is denoted explicitly via '\\0'\n\nSingle quotes to denote a character.\nA backslash “escape” character to denote a special character.\nA zero to denote it is “null”, “zero”, or “nothing”\n\nIt is numerically equal to zero.\n\nUnlike Python booleans, C has no boolean type.\n\nRather it has truthiness, akin to Python if statements with numerical conditions.\nThe numerical value zero is false.\nAll other numerical values are true.\n\nThe termination statement causes the loop to end when it is equal to zero.\nFind the length of the first word in a string with a terminator only:\n\nCheck if a character is the null terminator in the termination statement.\nInclude an incrementation in the for loop code block.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i] ; ) {\n        i++;\n}\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThis is also a good example of how sometimes the C for loop may have no code block.\n\nHere is a logically equivalent way to measure the length of a char * serving as a string.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i] ; i++ ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThis is also a good chance to test what order the terminator and iterator are checked.\n\nThe terminator is checked before the iterator.\nThe iterator does not if the terminator is true.\n\nThis matters a lot in this case, where the length calculated would be off by one.\n\n12 instead of 11\nThe value of the iteration variable i is increased the same time the terminator is checked.\nSo the null terminator is at index 11 but this C code would print the numerical value 12.\n\n\nchar *str = \"hello world\";\nint i = 0;\nfor ( ; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\n\nInitiate\n\nThe initiator allows setting a variable to a certain value before beginning a loop.\nI mostly use it when I have more than one loop, and want to use i for both.\nHere is the above example, with an iniatiator.\n\nchar *str = \"hello world\";\nint i ;\nfor ( i = 0; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\nThe following is permissable in all modern forms of C, but was not an initial feature of the language.\n\nAs a rule, I try not to declare variables in the initializer so my code works on older devices.\nIt also makes writing a C compiler easier, if you ever plan to do that.\n\n\nchar *str = \"hello world\";\nfor ( int i = 0; str[i++] ; ) { }\nprintf(\"%d\\n\", i);\nreturn 0;\n\n\n\n\n\nArrays Show\n\n\nCollections\n\nC lacks any collection type (list, set, tuple, string)\n\nnotation is used instead\n\ndenotes the location of a some value\n\nThe type of this value gives its size\nSuccessive values are at successive locations\nThese are memory address.\n\n[] notation may also be used\n\nWe simply include the length within brackets.\n\nWe don’t worry about any of that for now.\nYou will likely want to use a collection on Enigma:\n\nRotor rotations\nRotors themselves\nI don’t know, for fun.\n\nC array notation is very similar to Python set notation, but maintains order\n\nYou are responsible for keeping track of the length.\n\n\nchar carray[5] = {'a', 'e', 'i', 'o', 'u'};\nint iarray[5] = {2, 4, 8, 16, 32};\nint i;\nfor (i = 0; i &lt; 5; i++) {\n    printf(\"%c %d\\n\", carray[i], iarray[i]);\n}\n\nCharacter arrays\n\nUnlike Python, where a list of characters and a string of characters differ.\nIn C, an array of characters and a “string” of characters are identical.\n\nchar carray[5] = {'a', 'e', 'i', 'o', 'u'};\nchar string[5] = \"abcde\";\nint i;\nfor (i = 0; i &lt; 5; i++) {\n        printf(\"%c %c\\n\", carray[i], string[i]);\n}\n\nC strings are implicitly null terminated, so there is a minor difference, but that is immaterial here.\n\nHow would you check if a string is null terminated?\n\n\n\n\n\n\n\nC math Show\n\n\nInteger Division\n\nIn C, there are numerous integer data types, including int and char\nAll use integer division by default.\nTest as follows:\n\nint i;\nfor (i = 0; i &lt; 5; i++) {\n        printf(\"%d / %d -&gt; %d\\n\", i, 2, i / 2);\n}\n\nThe results are clear:\n\n0 / 2 -&gt; 0\n1 / 2 -&gt; 0\n2 / 2 -&gt; 1\n3 / 2 -&gt; 1\n4 / 2 -&gt; 2\n\n\nModulo\n\nBoth C and Python have a % operator\n\nIn Python it is the “more mathematical correct” modulo operation\nIn C it is the less common remainder operation.\n\nThe differences were non-obvious and led to a pernicious bug in my enigma.c\n\n\nPython %\n\nFirst, test Python\n\n\n\nmodulo.py\n\n[print(f\"{i:2d} % 3 -&gt; {i%3:d}\") for i in range(-5,5)]\n\n\nWe see the predictable result.\n\n-5 % 3 -&gt; 1\n-4 % 3 -&gt; 2\n-3 % 3 -&gt; 0\n-2 % 3 -&gt; 1\n-1 % 3 -&gt; 2\n 0 % 3 -&gt; 0\n 1 % 3 -&gt; 1\n 2 % 3 -&gt; 2\n 3 % 3 -&gt; 0\n 4 % 3 -&gt; 1\n\n\nC %\n\nNow, test C\n\n\n\nremainder.c\n\n#include &lt;stdio.h&gt;\n\nint main() {\n        int i;\n        for (i = -5; i != 5; i++) {\n                printf(\"%2d %% %d -&gt; %2d\\n\", i, 3, i % 3);\n        }\n        return 0;\n}\n\n\nWe see the predictable result.\n\n-5 % 3 -&gt; -2\n-4 % 3 -&gt; -1\n-3 % 3 -&gt;  0\n-2 % 3 -&gt; -2\n-1 % 3 -&gt; -1\n 0 % 3 -&gt;  0\n 1 % 3 -&gt;  1\n 2 % 3 -&gt;  2\n 3 % 3 -&gt;  0\n 4 % 3 -&gt;  1\n\nUnlike Python, C % may generate negative results.\nThere are a number of ways to deal with that.\n\n\n\nPythonic % in C\n\nWith thanks to Stack Overflow\n\nprintf(\"%2d Py%% %d -&gt; %d\\n\", i, 3, ((i % 3) + 3) % 3);\n\nThis gives necessarily positive values.\n\n-5 Py% 3 -&gt; 1\n-4 Py% 3 -&gt; 2\n-3 Py% 3 -&gt; 0\n-2 Py% 3 -&gt; 1\n-1 Py% 3 -&gt; 2\n 0 Py% 3 -&gt; 0\n 1 Py% 3 -&gt; 1\n 2 Py% 3 -&gt; 2\n 3 Py% 3 -&gt; 0\n 4 Py% 3 -&gt; 1\n\n\n\n\n\nC args Show\n\n\nArguments\n\nThe reference Python contains the following snippet:\n\nif __name__ == \"__main__\":\n    import sys\n    print(enigma(sys.argv[1]))\n\nThis is roughly equivalent to printing the return result of the enigma function within a function called main.\nThis is close to C, but we don’t haven’t introduced a way to use command line arguments.\nLet’s look at a minimal Python example.\n\n\nPyEcho\n\n\npyecho.py\n\nimport sys\nprint(sys.argv[1])\n\n\nWe use as follows:\n\npython3 pyecho.py \"hello world\"\n\nWe can construct the same within C.\n\n\n\nCEcho\n\nThe Python sys module contains many features present by default in a systems programming language.\nOne such is argv, a vector (in the mathematical sense) of arguments.\n\nThese are command line arguments.\nIn Python a list of strings\nIn C an array of char *\nThe zeroth argument is the name of the Python script or C executable\n\nThere is additionally something called argc, an integer count of arguments.\n\nIn C this is needed to know the length of the vector\nIn Python it is redundant, but potentially useful\n\nWe have thus far written main with no arguments, so we also introduce how to write functions with arguments.\n\nC function arguments are identical to Python function arguments\nAs with other variables, C function argument variables must be declared with a type\nUsing functions will make writing C much easier.\n\n\n\n\ncecho.c\n\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n        printf(\"%s\\n\", argv[1]);\n        return 0;\n}\n\n\nYou may wish to compile then try the following:\n\ngcc cecho.c -o cecho\n\nNo arguments, which gives a segmentation fault, a type of error when you try to read something that doesn’t exist\n\n./cecho\n\nOne argument, which is printed.\n\n./cecho hello\n\nTwo argument, of which one is printed.\n\n./cecho hello world\n\nTwo words as a single argument using quotes.\n\n./cecho \"hello world\"\n\nYou may note that Python has all the same features."
  },
  {
    "objectID": "podman.html#kennedy-is-my-middle-name",
    "href": "podman.html#kennedy-is-my-middle-name",
    "title": "Podman",
    "section": "Kennedy is my middle name",
    "text": "Kennedy is my middle name\n\nNot an endorsement; I voted for ******* **** ****** ********!"
  }
]