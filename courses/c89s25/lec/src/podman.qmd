---
title: Podman
theme: dark
author: Prof. Calvin
subtitle: "Week 0x0"
institute: Crypto
---

# Announcements

- **Welcome** to variously CS 276/CS 540

  - What is in point of fact a systems cryptography course.
- **Action Items**:
  - Access the [course webpage](https://cd-public.github.io/courses/c89s25)
  - Join the Discord!
    - You should have gotten an email...
  - Spin up a GitHub acct if you don't have one.

# Homework

- The first homework, "Enigma"
  - Due when class starts Th of Week 0x1
  - The infamous CS1 hw, now in a good language!
  - Mostly just get the toolchain working.
      - This is a calibration assignment
      - Do whatever you would usually do
        - ask for help
        - work together
        - use the not-technically-plagiarism LLVMs


# Enigma

:::: {.columns}

::: {.column width="45%"}
```
ABCDEFGHIJKLMNOPQRSTUVWXYZ # in
    |
BDFHJLCPRTXVZNYEIWGAKMUSQO # fast
    >>>>>>
ABCDEFGHIJKLMNOPQRSTUVWXYZ 
         |
AJDKSIRUXBLHWTMCQGZNPYFVOE # mid
 <<<<<<<<<
ABCDEFGHIJKLMNOPQRSTUVWXYZ
 |
BDFHJLCPRTXVZNYEIWGAKMUSQO # slow
```
:::

::: {.column width="10%"}
->
:::

::: {.column width="45%"}
```
BDFHJLCPRTXVZNYEIWGAKMUSQO
 >>>
ABCDEFGHIJKLMNOPQRSTUVWXYZ 
   |
IXUHFEZDAOMTKQJWNSRLCYPBVG # reflect
   |
BDFHJLCPRTXVZNYEIWGAKMUSQO # slow
   >>>>>
ABCDEFGHIJKLMNOPQRSTUVWXYZ # out

# etc etc   
```
:::

::::


# Today

- Introduce the course
  - The C Programming Language
  - Cryptography + Cryptocurrency
- Introduce the technologies
  - `podman`
  - `vim`
  - `gcc`
  - `git`
  
# Pre-reqs

- These things:
  - `podman`
  - `vim`
  - `gcc`
  - `git`
- Are commands at the command line
- If you are afraid of the command line, drop this class.

# It me

- **Name** 
  - Calvin (Deutschbein) 
- **Call me**
  - (Professor) Calvin 
- **Pronouns** 
  - _pronouns or big frowns_ - me
  - they/them 

# Mortal Coil

- Office (Hours)
  - Technically Ford 3rd Floor, Salem 
  - Actually Discord 10 AM to 2 AM
- Email:
  - [ckdeutschbein@willamette.edu](ckdeutschbein@willamette.edu)
- Website:
  - [cd-public.github.io](cd-public.github.io)
- I'm also on twitch/instagram/bsky/etc

# The Great Work

- Thesis Title
  - Mining Secure Behavior of Hardware Designs 
- Plain English
  - Just as there are bugs in code that makes software, modern hardware is also written in code and therefore may contain bugs. I find these bugs. 

# How To Do It

- After ~10 years of systems research I've convinced myself [only two things](https://www.joelonsoftware.com/2005/12/29/the-perils-of-javaschools-2/) that really matter:

  - Pointers, and
  - Recursion 

- Recursion isn't too bad... 

```py
>>> exp = lambda b, n : b if n == 1 else b*exp(b,n-1)
>>> exp(2,8)
256
```

# Pointers

- Pointers are a beast, but without them nothing makes sense! 

:::: {.columns}

::: {.column width="50%"}
```py
>>> x = 1
>>> def addx():
...     x += 1
...
>>> addx()
UnboundLocalError:
<blah blah blah error messages>
```
::: 

::: {.column width="50%"}

```py
>>> x = [1]
>>> def addx():
...     x[0] += 1
...
>>> addx()
>>> x
[2]
```
:::

::::

# Insight

- **Definition:**
  - Pointers: Variables that store memory addresses.
  - Recursion: Functions calling themselves to solve sub-problems.
- **Importance:**
  - Core to efficient algorithms and memory management in low-level programming.
  

# Python and Pointers

- **Why not .py (.js, .java, .cs, .cpp, etc)?**
  - These languages _abstract_ memory.
  - This abstraction makes computation **unclear**
  - This lack of clarity:
    - Adversely impacts education
    - Complicates low-level design
    - Leads to low performance
  - Good languages (except Java) but not for us

# C and Pointers

- **Why C?**
  - Everyone hates C because it makes us think...
  - And thinking is **hard**.
  - But there exist problems (security) for which careful thought is necessary.
  - Learning C makes us better [Blub](https://paulgraham.com/avg.html) programmers.
- **I claim:** You needn't use C in real life.

## Kennedy is my middle name

![Not an endorsement; I voted for ******* **** ****** ********!](https://www.azquotes.com/picture-quotes/quote-we-choose-to-go-to-the-moon-in-this-decade-and-do-the-other-things-not-because-they-john-f-kennedy-34-98-64.jpg)


# C is for Clear

- C does not _obscure_ what a computer is doing.
- This lack of obscurity allows for greater precision.
- This greater precision can be used to achieve security goals.
- **Advantages of C:**
  - Fine-grained control over memory.
  - Essential for systems programming.

# This class

- I am a systems security researcher and I discerned two core gaps in Willamette CS education:
  - Systems, and
  - Security
- Teaching systems alone can be boring or tedious.
- Teaching security alone can be defuse and ethereal.

# Learning Objectives


-  Differentiate confidentiality, integrity, and availability.
-  Apply modular arithmetic to computational systems.
-  Apply recursion and a pointers to programming problems.
-  Articulate the impossibility of distributed consensus.
-  Understand a low-level systems language. 

# Sketch

```{mermaid}
%%| theme: Darkly
flowchart LR
  A( ) --> B(SHA)
  A --> C(RSA)
  A --> D(AES)
  D --> H{Midterm}
  B --> E(Block Chain)
  C --> F(Merkle Tree)
  B --> F
  E --> G(Nakamoto'08)
  F --> G
  G --> I((Capstone))
```

# SHA

- **SHA Basics:**
  - Cryptographic hash function family.
  - Input data into fixed-size hash values.
- **Use Cases:**
  - Data integrity.
- **Learning Objectives:**
  - Reason about bits and bytes.

# RSA

- **RSA Basics:**
  - Public-key cryptography algorithm.
  - Based on prime factorization being hard.
- **Use Cases:**
  - Data confidentiality.
- **Learning Objectives:**
  - Reason about numerical computing.

# AES

- **AES Basics:**
  - Symmetric encryption algorithm.
  - Operates on fixed-size blocks of data.
- **Use Cases:**
  - Data availability vs. RSA.
- **Learning Objectives:**
  - Gain technical proficiency in C
  
# Midterm

- I will ask about scripting in C
- I will ask about
  - Confidentiality
  - Integrity
  - Availability
- Then we move onto cryptocurrency.
  - As a case of distributed consensus, computing hardest problem.

# RSA + SHA = BTC

- **Facilitating Blockchain:**
  - SHA & RSA in play
    - RSA: Keep wallet keys _confidential_
    - SHA: Maintain wallet content _integrity_
- But we need some techniques to implement...
  - Pointers & Recursion

# Blockchain

- **Blockchain:**
  - Blockchain structure resembles linked lists.
    - Linked lists use **pointers**
    - **Pointers** are used **recursively**
  - Pointers are validated with **SHA**
    - That is, they have integrity

# Merkle Trees

- **Merkle Trees:**
  - Tree structure using SHA for data integrity.
  - Hashes stored as nodes; pointers link them.
  - Leaf nodes are RSA signatures!
- Merkle Trees are **balanced**
  - We get to see a way to implement complex data structures in a low level language in a way that solves a real problem.

# Final

- **Implement Full-Custom BTC**
  - Under absolutely no circumstances use it
    - It'll be insecure for reasons out-of-scope
  - CS 540:
    - Must add some improvement
    - Must conduct evaluative experiments
    - Must document as a whitepaper

# Structure

- Each of these topics gets 2 weeks
  - One week of enabling technology
  - One week teaching the thing
- Each week has 3-4 parts
  - 1 Lecture, like this
  - 1 Demo, a live code-along
  - 1 Homework assignment via gcc/git/vim/podman
  - 1 Enrichment video, optional for 276

# Today

- &check; Introduce the course
  - &check; The C Programming Language
  - &check; Cryptography + Cryptocurrency
- Introduce the technologies
  - `podman`
  - `vim`
  - `gcc`
  - `git`

# What is Podman?

- **Definition:**
  - Platform to develop, ship, and run applications in isolated containers.
- **Benefits:**
  - Portability, consistency across environments.
- **Editorializing:**
  - Probably all code should be written in a container now that they exist.

# In practice:

- **Windows**
  - Installer -> Run desktop app, then
  - A command in cmd.exe or Powershell
- **Mac:**
  - Installer or brew-> Run app, then
  - A command you can type into terminal
- **Linux:**
  - Have fun with your package manager.

# Circa ~2013

- **The problem:**
  - We want to run code.
  - We want the code to create programs
  - We want the programs to work on more than one computer.
- **The solution:**
  - Realistically, the Java Virtual Machine
  - But then you have to write Java (this is pre-Scala, pre-Kotlin)
  
  
# Circa ~2008

- **The setting:**
  - Cloud is taking off, mainly Amazon + Google
  - They already have to run everything in virtual machine.
  - They needed a lightweight solution.
- **The solution:**
  - Docker is written in the Google C-like, Go
  - It is a lightweight pretend computer.
  
# Docker->Podman

- Docker is closed-source (bad)
- Docker is critical infastructre in most code bases
- The Redhat team (from <span style="color:#4B9CD3">CAROLINA</span>) stepped into solve the problem
- They make Podman - completely compatible, completely open-source
- We use Podman in this class

# Podman

- Podman solves the problem of writing code on one computer and running it another.
- Simply specify a Podman image
  - a description of a imaginary computer
- Podman will pretend to be that computer
- We can run code "inside" Podman
  - Code in the container can't tell it's running inside Podman

# Podman & Python

- **Windows, Mac, Linux:**
  - Win tends to refer to Python3 as "python"
  - Mac tends to refer to Python2 as "python"
  - Linux, because its good, makes you specify:
```bash
user@DESKTOP-THMS2PJ:~$ python
Command 'python' not found, did you mean:
  command 'python3' from deb python3
  command 'python' from deb python-is-python3
```

# Bugs

- This can lead to bugs pretty quickly
  - Say I write and test a .py file on Mac
  - I email it to my prof for help
  - It breaks on my prof's Linux device:
```bash
user@DESKTOP-THMS2PJ:~$ python2 -c "print 'hello world'"
hello world
user@DESKTOP-THMS2PJ:~$ python3 -c "print 'hello world'"
  File "<string>", line 1
    print 'hello world'
    ^^^^^^^^^^^^^^^^^^^
SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
```

# Versioning

- Python2/3 is just an extreme example
  - Most of code reuse has versioning problems
  - Many CS1 headaches are Win/Mac python'ing
  - But really: everything breaks all the time
- Solution: Just run in podman:
```bash
C:\Users\cd-desk>podman run -it python:alpine python
Python 3.13.1 (main, Dec  4 2024, 20:31:31) [GCC 13.2.1 20240309] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> print("hello world")
hello world
>>> exit()
```

# Podman

- `podman` is a command, like `python`
  - Like `python` we can provide arguments
  - Unlike `python` we provide further commands, not just a .py file
  
```bash
C:\Users\cd-desk>podman
Manage pods, containers and images

Usage:
  podman [options] [command]

Available Commands:
  attach      Attach to a running container
  build       Build an image using instructions from Containerfiles
```

# Run

- First thing we'll do in Podman is `run`
- So we do:
```bash
C:\Users\cd-desk>podman run
Error: requires at least 1 arg(s), only received 0
```

# Images

- The thing we run is called an image
- We'll use a sample image named Python
  - You'll never guess what it does (Python)
  
```bash
C:\Users\cd-desk>podman run python
Resolved "python" as an alias (/etc/containers/registries.conf.d/000-shortnames.conf)
Trying to pull docker.io/library/python:latest...
Getting image source signatures
Copying blob sha256:abab87fa45d0b95db90eb47059d7e87f5a69281fe5d76fcdb7889ec5c310f44c
...
Writing manifest to image destination

C:\Users\cd-desk>
```

# Just do -it

- We downloaded and ran an image but...
  - We didn't ask the image to do anything
  - So it exits instantly
- `run -it` for "interactive terminal"

```bash
C:\Users\cd-desk>podman run -it python
Python 3.13.1 (main, Dec  4 2024, 20:40:27) [GCC 12.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>
```

- This is a fun trick for people to lazy too update their local Python version (me)

# Today

- &check; Introduce the course
  - &check; The C Programming Language
  - &check; Cryptography + Cryptocurrency
- Introduce the technologies
  - &check; `podman`
  - `vim`
  - `gcc`
  - `git`


